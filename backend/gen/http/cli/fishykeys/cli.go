// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/backend/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	fishykeysc "github.com/Vidalee/FishyKeys/backend/gen/http/fishykeys/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `fishykeys (create-master-key|get-key-status|add-share|delete-share)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` fishykeys create-master-key --body '{
      "min_shares": 3,
      "total_shares": 5
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		fishykeysFlags = flag.NewFlagSet("fishykeys", flag.ContinueOnError)

		fishykeysCreateMasterKeyFlags    = flag.NewFlagSet("create-master-key", flag.ExitOnError)
		fishykeysCreateMasterKeyBodyFlag = fishykeysCreateMasterKeyFlags.String("body", "REQUIRED", "")

		fishykeysGetKeyStatusFlags = flag.NewFlagSet("get-key-status", flag.ExitOnError)

		fishykeysAddShareFlags    = flag.NewFlagSet("add-share", flag.ExitOnError)
		fishykeysAddShareBodyFlag = fishykeysAddShareFlags.String("body", "REQUIRED", "")

		fishykeysDeleteShareFlags    = flag.NewFlagSet("delete-share", flag.ExitOnError)
		fishykeysDeleteShareBodyFlag = fishykeysDeleteShareFlags.String("body", "REQUIRED", "")
	)
	fishykeysFlags.Usage = fishykeysUsage
	fishykeysCreateMasterKeyFlags.Usage = fishykeysCreateMasterKeyUsage
	fishykeysGetKeyStatusFlags.Usage = fishykeysGetKeyStatusUsage
	fishykeysAddShareFlags.Usage = fishykeysAddShareUsage
	fishykeysDeleteShareFlags.Usage = fishykeysDeleteShareUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "fishykeys":
			svcf = fishykeysFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "fishykeys":
			switch epn {
			case "create-master-key":
				epf = fishykeysCreateMasterKeyFlags

			case "get-key-status":
				epf = fishykeysGetKeyStatusFlags

			case "add-share":
				epf = fishykeysAddShareFlags

			case "delete-share":
				epf = fishykeysDeleteShareFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "fishykeys":
			c := fishykeysc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-master-key":
				endpoint = c.CreateMasterKey()
				data, err = fishykeysc.BuildCreateMasterKeyPayload(*fishykeysCreateMasterKeyBodyFlag)
			case "get-key-status":
				endpoint = c.GetKeyStatus()
			case "add-share":
				endpoint = c.AddShare()
				data, err = fishykeysc.BuildAddSharePayload(*fishykeysAddShareBodyFlag)
			case "delete-share":
				endpoint = c.DeleteShare()
				data, err = fishykeysc.BuildDeleteSharePayload(*fishykeysDeleteShareBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// fishykeysUsage displays the usage of the fishykeys command and its
// subcommands.
func fishykeysUsage() {
	fmt.Fprintf(os.Stderr, `The FishyKeys server handles master key operations
Usage:
    %[1]s [globalflags] fishykeys COMMAND [flags]

COMMAND:
    create-master-key: Create a new master key and split it into shares
    get-key-status: Get the current status of the master key
    add-share: Add a share to unlock the master key
    delete-share: Delete a share from the key management system

Additional help:
    %[1]s fishykeys COMMAND --help
`, os.Args[0])
}
func fishykeysCreateMasterKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] fishykeys create-master-key -body JSON

Create a new master key and split it into shares
    -body JSON: 

Example:
    %[1]s fishykeys create-master-key --body '{
      "min_shares": 3,
      "total_shares": 5
   }'
`, os.Args[0])
}

func fishykeysGetKeyStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] fishykeys get-key-status

Get the current status of the master key

Example:
    %[1]s fishykeys get-key-status
`, os.Args[0])
}

func fishykeysAddShareUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] fishykeys add-share -body JSON

Add a share to unlock the master key
    -body JSON: 

Example:
    %[1]s fishykeys add-share --body '{
      "share": "EXAMPLEA5ZKwDn8Zotr3B+d+F+UzrcJ1Yhl2rU0"
   }'
`, os.Args[0])
}

func fishykeysDeleteShareUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] fishykeys delete-share -body JSON

Delete a share from the key management system
    -body JSON: 

Example:
    %[1]s fishykeys delete-share --body '{
      "index": 1
   }'
`, os.Args[0])
}
