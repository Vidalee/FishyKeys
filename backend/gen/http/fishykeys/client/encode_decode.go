// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/backend/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	fishykeys "github.com/Vidalee/FishyKeys/backend/gen/fishykeys"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateMasterKeyRequest instantiates a HTTP request object with method
// and path set to call the "fishykeys" service "create_master_key" endpoint
func (c *Client) BuildCreateMasterKeyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateMasterKeyFishykeysPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fishykeys", "create_master_key", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateMasterKeyRequest returns an encoder for requests sent to the
// fishykeys create_master_key server.
func EncodeCreateMasterKeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*fishykeys.CreateMasterKeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("fishykeys", "create_master_key", "*fishykeys.CreateMasterKeyPayload", v)
		}
		body := NewCreateMasterKeyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("fishykeys", "create_master_key", err)
		}
		return nil
	}
}

// DecodeCreateMasterKeyResponse returns a decoder for responses returned by
// the fishykeys create_master_key endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateMasterKeyResponse may return the following errors:
//   - "internal_error" (type fishykeys.InternalError): http.StatusInternalServerError
//   - "invalid_parameters" (type fishykeys.InvalidParameters): http.StatusBadRequest
//   - error: internal error
func DecodeCreateMasterKeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateMasterKeyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fishykeys", "create_master_key", err)
			}
			res := NewCreateMasterKeyResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fishykeys", "create_master_key", err)
			}
			return nil, NewCreateMasterKeyInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fishykeys", "create_master_key", err)
			}
			return nil, NewCreateMasterKeyInvalidParameters(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fishykeys", "create_master_key", resp.StatusCode, string(body))
		}
	}
}

// BuildGetKeyStatusRequest instantiates a HTTP request object with method and
// path set to call the "fishykeys" service "get_key_status" endpoint
func (c *Client) BuildGetKeyStatusRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetKeyStatusFishykeysPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fishykeys", "get_key_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetKeyStatusResponse returns a decoder for responses returned by the
// fishykeys get_key_status endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetKeyStatusResponse may return the following errors:
//   - "internal_error" (type fishykeys.InternalError): http.StatusInternalServerError
//   - "no_key_set" (type fishykeys.NoKeySet): http.StatusNotFound
//   - error: internal error
func DecodeGetKeyStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetKeyStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fishykeys", "get_key_status", err)
			}
			err = ValidateGetKeyStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fishykeys", "get_key_status", err)
			}
			res := NewGetKeyStatusResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fishykeys", "get_key_status", err)
			}
			return nil, NewGetKeyStatusInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fishykeys", "get_key_status", err)
			}
			return nil, NewGetKeyStatusNoKeySet(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fishykeys", "get_key_status", resp.StatusCode, string(body))
		}
	}
}
