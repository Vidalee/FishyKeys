// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys client HTTP transport
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/backend/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the fishykeys service endpoint HTTP clients.
type Client struct {
	// CreateMasterKey Doer is the HTTP client used to make requests to the
	// create_master_key endpoint.
	CreateMasterKeyDoer goahttp.Doer

	// AddShare Doer is the HTTP client used to make requests to the add_share
	// endpoint.
	AddShareDoer goahttp.Doer

	// GetKeyStatus Doer is the HTTP client used to make requests to the
	// get_key_status endpoint.
	GetKeyStatusDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the fishykeys service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateMasterKeyDoer: doer,
		AddShareDoer:        doer,
		GetKeyStatusDoer:    doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateMasterKey returns an endpoint that makes HTTP requests to the
// fishykeys service create_master_key server.
func (c *Client) CreateMasterKey() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateMasterKeyRequest(c.encoder)
		decodeResponse = DecodeCreateMasterKeyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateMasterKeyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateMasterKeyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("fishykeys", "create_master_key", err)
		}
		return decodeResponse(resp)
	}
}

// AddShare returns an endpoint that makes HTTP requests to the fishykeys
// service add_share server.
func (c *Client) AddShare() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddShareRequest(c.encoder)
		decodeResponse = DecodeAddShareResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddShareRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddShareDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("fishykeys", "add_share", err)
		}
		return decodeResponse(resp)
	}
}

// GetKeyStatus returns an endpoint that makes HTTP requests to the fishykeys
// service get_key_status server.
func (c *Client) GetKeyStatus() goa.Endpoint {
	var (
		decodeResponse = DecodeGetKeyStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetKeyStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetKeyStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("fishykeys", "get_key_status", err)
		}
		return decodeResponse(resp)
	}
}
