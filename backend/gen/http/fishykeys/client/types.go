// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys HTTP client types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/backend/design

package client

import (
	fishykeys "github.com/Vidalee/FishyKeys/backend/gen/fishykeys"
	goa "goa.design/goa/v3/pkg"
)

// CreateMasterKeyRequestBody is the type of the "fishykeys" service
// "create_master_key" endpoint HTTP request body.
type CreateMasterKeyRequestBody struct {
	// Total number of shares to create
	TotalShares int `form:"total_shares" json:"total_shares" xml:"total_shares"`
	// Minimum number of shares required to reconstruct the key
	MinShares int `form:"min_shares" json:"min_shares" xml:"min_shares"`
}

// CreateMasterKeyResponseBody is the type of the "fishykeys" service
// "create_master_key" endpoint HTTP response body.
type CreateMasterKeyResponseBody struct {
	// The generated key shares
	Shares []string `form:"shares,omitempty" json:"shares,omitempty" xml:"shares,omitempty"`
}

// GetKeyStatusResponseBody is the type of the "fishykeys" service
// "get_key_status" endpoint HTTP response body.
type GetKeyStatusResponseBody struct {
	// Whether the key is currently locked
	IsLocked *bool `form:"is_locked,omitempty" json:"is_locked,omitempty" xml:"is_locked,omitempty"`
	// Number of shares currently held
	CurrentShares *int `form:"current_shares,omitempty" json:"current_shares,omitempty" xml:"current_shares,omitempty"`
	// Minimum number of shares required
	MinShares *int `form:"min_shares,omitempty" json:"min_shares,omitempty" xml:"min_shares,omitempty"`
	// Total number of shares
	TotalShares *int `form:"total_shares,omitempty" json:"total_shares,omitempty" xml:"total_shares,omitempty"`
}

// NewCreateMasterKeyRequestBody builds the HTTP request body from the payload
// of the "create_master_key" endpoint of the "fishykeys" service.
func NewCreateMasterKeyRequestBody(p *fishykeys.CreateMasterKeyPayload) *CreateMasterKeyRequestBody {
	body := &CreateMasterKeyRequestBody{
		TotalShares: p.TotalShares,
		MinShares:   p.MinShares,
	}
	return body
}

// NewCreateMasterKeyResultCreated builds a "fishykeys" service
// "create_master_key" endpoint result from a HTTP "Created" response.
func NewCreateMasterKeyResultCreated(body *CreateMasterKeyResponseBody) *fishykeys.CreateMasterKeyResult {
	v := &fishykeys.CreateMasterKeyResult{}
	if body.Shares != nil {
		v.Shares = make([]string, len(body.Shares))
		for i, val := range body.Shares {
			v.Shares[i] = val
		}
	}

	return v
}

// NewCreateMasterKeyInternalError builds a fishykeys service create_master_key
// endpoint internal_error error.
func NewCreateMasterKeyInternalError(body string) fishykeys.InternalError {
	v := fishykeys.InternalError(body)

	return v
}

// NewCreateMasterKeyInvalidParameters builds a fishykeys service
// create_master_key endpoint invalid_parameters error.
func NewCreateMasterKeyInvalidParameters(body string) fishykeys.InvalidParameters {
	v := fishykeys.InvalidParameters(body)

	return v
}

// NewGetKeyStatusResultOK builds a "fishykeys" service "get_key_status"
// endpoint result from a HTTP "OK" response.
func NewGetKeyStatusResultOK(body *GetKeyStatusResponseBody) *fishykeys.GetKeyStatusResult {
	v := &fishykeys.GetKeyStatusResult{
		IsLocked:      *body.IsLocked,
		CurrentShares: *body.CurrentShares,
		MinShares:     *body.MinShares,
		TotalShares:   *body.TotalShares,
	}

	return v
}

// NewGetKeyStatusInternalError builds a fishykeys service get_key_status
// endpoint internal_error error.
func NewGetKeyStatusInternalError(body string) fishykeys.InternalError {
	v := fishykeys.InternalError(body)

	return v
}

// NewGetKeyStatusNoKeySet builds a fishykeys service get_key_status endpoint
// no_key_set error.
func NewGetKeyStatusNoKeySet(body string) fishykeys.NoKeySet {
	v := fishykeys.NoKeySet(body)

	return v
}

// ValidateGetKeyStatusResponseBody runs the validations defined on
// get_key_status_response_body
func ValidateGetKeyStatusResponseBody(body *GetKeyStatusResponseBody) (err error) {
	if body.IsLocked == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_locked", "body"))
	}
	if body.CurrentShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current_shares", "body"))
	}
	if body.MinShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_shares", "body"))
	}
	if body.TotalShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_shares", "body"))
	}
	return
}
