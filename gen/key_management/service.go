// Code generated by goa v3.21.1, DO NOT EDIT.
//
// key_management service
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package keymanagement

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The FishyKeys server handles master key operations
type Service interface {
	// Create a new master key and split it into shares
	CreateMasterKey(context.Context, *CreateMasterKeyPayload) (res *CreateMasterKeyResult, err error)
	// Get the current status of the master key
	GetKeyStatus(context.Context) (res *GetKeyStatusResult, err error)
	// Add a share to unlock the master key
	AddShare(context.Context, *AddSharePayload) (res *AddShareResult, err error)
	// Delete a share from the key management system
	DeleteShare(context.Context, *DeleteSharePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "fishykeys"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "key_management"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"create_master_key", "get_key_status", "add_share", "delete_share"}

// AddSharePayload is the payload type of the key_management service add_share
// method.
type AddSharePayload struct {
	// One of the shares need to unlock the master key
	Share string
}

// AddShareResult is the result type of the key_management service add_share
// method.
type AddShareResult struct {
	// The index of the share added
	Index int
	// Whether the master key has been unlocked
	Unlocked bool
}

// CreateMasterKeyPayload is the payload type of the key_management service
// create_master_key method.
type CreateMasterKeyPayload struct {
	// Total number of shares to create
	TotalShares int
	// Minimum number of shares required to reconstruct the key
	MinShares int
	// Admin username for key management
	AdminUsername string
	// Admin password for key management
	AdminPassword string
}

// CreateMasterKeyResult is the result type of the key_management service
// create_master_key method.
type CreateMasterKeyResult struct {
	// The generated key shares
	Shares []string
	// The admin user's username
	AdminUsername *string
}

// DeleteSharePayload is the payload type of the key_management service
// delete_share method.
type DeleteSharePayload struct {
	// The index of the share to delete
	Index int
}

// GetKeyStatusResult is the result type of the key_management service
// get_key_status method.
type GetKeyStatusResult struct {
	// Whether the key is currently locked
	IsLocked bool
	// Number of shares currently held
	CurrentShares int
	// Minimum number of shares required
	MinShares int
	// Total number of shares
	TotalShares int
}

// Could not recombine the shares to unlock the key
type CouldNotRecombine string

// Internal server error
type InternalError string

// Invalid parameters provided
type InvalidParameters string

// A master key already exists
type KeyAlreadyExists string

// The master key is already unlocked
type KeyAlreadyUnlocked string

// No master key has been set
type NoKeySet string

// The maximum number of shares has been reached
type TooManyShares string

// The index provided does not match any share
type WrongIndex string

// The key recombined from the shares is not the correct key
type WrongShares string

// Error returns an error description.
func (e CouldNotRecombine) Error() string {
	return "Could not recombine the shares to unlock the key"
}

// ErrorName returns "could_not_recombine".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e CouldNotRecombine) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "could_not_recombine".
func (e CouldNotRecombine) GoaErrorName() string {
	return "could_not_recombine"
}

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e InvalidParameters) Error() string {
	return "Invalid parameters provided"
}

// ErrorName returns "invalid_parameters".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidParameters) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_parameters".
func (e InvalidParameters) GoaErrorName() string {
	return "invalid_parameters"
}

// Error returns an error description.
func (e KeyAlreadyExists) Error() string {
	return "A master key already exists"
}

// ErrorName returns "key_already_exists".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e KeyAlreadyExists) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "key_already_exists".
func (e KeyAlreadyExists) GoaErrorName() string {
	return "key_already_exists"
}

// Error returns an error description.
func (e KeyAlreadyUnlocked) Error() string {
	return "The master key is already unlocked"
}

// ErrorName returns "key_already_unlocked".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e KeyAlreadyUnlocked) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "key_already_unlocked".
func (e KeyAlreadyUnlocked) GoaErrorName() string {
	return "key_already_unlocked"
}

// Error returns an error description.
func (e NoKeySet) Error() string {
	return "No master key has been set"
}

// ErrorName returns "no_key_set".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NoKeySet) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "no_key_set".
func (e NoKeySet) GoaErrorName() string {
	return "no_key_set"
}

// Error returns an error description.
func (e TooManyShares) Error() string {
	return "The maximum number of shares has been reached"
}

// ErrorName returns "too_many_shares".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e TooManyShares) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "too_many_shares".
func (e TooManyShares) GoaErrorName() string {
	return "too_many_shares"
}

// Error returns an error description.
func (e WrongIndex) Error() string {
	return "The index provided does not match any share"
}

// ErrorName returns "wrong_index".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e WrongIndex) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "wrong_index".
func (e WrongIndex) GoaErrorName() string {
	return "wrong_index"
}

// Error returns an error description.
func (e WrongShares) Error() string {
	return "The key recombined from the shares is not the correct key"
}

// ErrorName returns "wrong_shares".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e WrongShares) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "wrong_shares".
func (e WrongShares) GoaErrorName() string {
	return "wrong_shares"
}

// MakeInvalidParameters builds a goa.ServiceError from an error.
func MakeInvalidParameters(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_parameters", false, false, false)
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "internal_error", false, false, false)
}
