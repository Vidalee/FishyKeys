// Code generated by goa v3.21.1, DO NOT EDIT.
//
// key_management client
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package keymanagement

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "key_management" service client.
type Client struct {
	CreateMasterKeyEndpoint goa.Endpoint
	GetKeyStatusEndpoint    goa.Endpoint
	AddShareEndpoint        goa.Endpoint
	DeleteShareEndpoint     goa.Endpoint
}

// NewClient initializes a "key_management" service client given the endpoints.
func NewClient(createMasterKey, getKeyStatus, addShare, deleteShare goa.Endpoint) *Client {
	return &Client{
		CreateMasterKeyEndpoint: createMasterKey,
		GetKeyStatusEndpoint:    getKeyStatus,
		AddShareEndpoint:        addShare,
		DeleteShareEndpoint:     deleteShare,
	}
}

// CreateMasterKey calls the "create_master_key" endpoint of the
// "key_management" service.
// CreateMasterKey may return the following errors:
//   - "invalid_parameters" (type *goa.ServiceError): Invalid parameters provided
//   - "internal_error" (type *goa.ServiceError): Internal server error
//   - "key_already_exists" (type *goa.ServiceError): A master key already exists
//   - error: internal error
func (c *Client) CreateMasterKey(ctx context.Context, p *CreateMasterKeyPayload) (res *CreateMasterKeyResult, err error) {
	var ires any
	ires, err = c.CreateMasterKeyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateMasterKeyResult), nil
}

// GetKeyStatus calls the "get_key_status" endpoint of the "key_management"
// service.
// GetKeyStatus may return the following errors:
//   - "no_key_set" (type *goa.ServiceError): No master key has been set
//   - "internal_error" (type *goa.ServiceError): Internal server error
//   - error: internal error
func (c *Client) GetKeyStatus(ctx context.Context) (res *GetKeyStatusResult, err error) {
	var ires any
	ires, err = c.GetKeyStatusEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*GetKeyStatusResult), nil
}

// AddShare calls the "add_share" endpoint of the "key_management" service.
// AddShare may return the following errors:
//   - "invalid_parameters" (type *goa.ServiceError): Invalid parameters provided
//   - "internal_error" (type *goa.ServiceError): Internal server error
//   - "too_many_shares" (type *goa.ServiceError): The maximum number of shares has been reached
//   - "could_not_recombine" (type *goa.ServiceError): Could not recombine the shares to unlock the key
//   - "wrong_shares" (type *goa.ServiceError): The key recombined from the shares is not the correct key
//   - "no_key_set" (type *goa.ServiceError): No master key has been set
//   - "key_already_unlocked" (type *goa.ServiceError): The master key is already unlocked
//   - error: internal error
func (c *Client) AddShare(ctx context.Context, p *AddSharePayload) (res *AddShareResult, err error) {
	var ires any
	ires, err = c.AddShareEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AddShareResult), nil
}

// DeleteShare calls the "delete_share" endpoint of the "key_management"
// service.
// DeleteShare may return the following errors:
//   - "no_key_set" (type *goa.ServiceError): No master key has been set
//   - "internal_error" (type *goa.ServiceError): Internal server error
//   - "key_already_unlocked" (type *goa.ServiceError): The master key is already unlocked
//   - "wrong_index" (type *goa.ServiceError): The index provided does not match any share
//   - error: internal error
func (c *Client) DeleteShare(ctx context.Context, p *DeleteSharePayload) (err error) {
	_, err = c.DeleteShareEndpoint(ctx, p)
	return
}
