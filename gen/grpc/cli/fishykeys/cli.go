// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys gRPC client CLI support package
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package cli

import (
	"flag"
	"fmt"
	"os"

	secretsc "github.com/Vidalee/FishyKeys/gen/grpc/secrets/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `secrets operator-get-secret-value
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` secrets operator-get-secret-value --message '{
      "path": "L2N1c3RvbWVycy9nb29nbGUvYXBpX2tleQ=="
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		secretsFlags = flag.NewFlagSet("secrets", flag.ContinueOnError)

		secretsOperatorGetSecretValueFlags       = flag.NewFlagSet("operator-get-secret-value", flag.ExitOnError)
		secretsOperatorGetSecretValueMessageFlag = secretsOperatorGetSecretValueFlags.String("message", "", "")
	)
	secretsFlags.Usage = secretsUsage
	secretsOperatorGetSecretValueFlags.Usage = secretsOperatorGetSecretValueUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "secrets":
			svcf = secretsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "secrets":
			switch epn {
			case "operator-get-secret-value":
				epf = secretsOperatorGetSecretValueFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "secrets":
			c := secretsc.NewClient(cc, opts...)
			switch epn {
			case "operator-get-secret-value":
				endpoint = c.OperatorGetSecretValue()
				data, err = secretsc.BuildOperatorGetSecretValuePayload(*secretsOperatorGetSecretValueMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// secretsUsage displays the usage of the secrets command and its subcommands.
func secretsUsage() {
	fmt.Fprintf(os.Stderr, `User service manages user accounts and authentication
Usage:
    %[1]s [globalflags] secrets COMMAND [flags]

COMMAND:
    operator-get-secret-value: Retrieve a secret value using GRPC

Additional help:
    %[1]s secrets COMMAND --help
`, os.Args[0])
}
func secretsOperatorGetSecretValueUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] secrets operator-get-secret-value -message JSON

Retrieve a secret value using GRPC
    -message JSON: 

Example:
    %[1]s secrets operator-get-secret-value --message '{
      "path": "L2N1c3RvbWVycy9nb29nbGUvYXBpX2tleQ=="
   }'
`, os.Args[0])
}
