// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"context"

	secretspb "github.com/Vidalee/FishyKeys/gen/grpc/secrets/pb"
	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildOperatorGetSecretValueFunc builds the remote method to invoke for
// "secrets" service "operator get secret value" endpoint.
func BuildOperatorGetSecretValueFunc(grpccli secretspb.SecretsClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.OperatorGetSecretValue(ctx, reqpb.(*secretspb.OperatorGetSecretValueRequest), opts...)
		}
		return grpccli.OperatorGetSecretValue(ctx, &secretspb.OperatorGetSecretValueRequest{}, opts...)
	}
}

// EncodeOperatorGetSecretValueRequest encodes requests sent to secrets
// operator get secret value endpoint.
func EncodeOperatorGetSecretValueRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*secrets.OperatorGetSecretValuePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secrets", "operator get secret value", "*secrets.OperatorGetSecretValuePayload", v)
	}
	return NewProtoOperatorGetSecretValueRequest(payload), nil
}

// DecodeOperatorGetSecretValueResponse decodes responses from the secrets
// operator get secret value endpoint.
func DecodeOperatorGetSecretValueResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*secretspb.OperatorGetSecretValueResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secrets", "operator get secret value", "*secretspb.OperatorGetSecretValueResponse", v)
	}
	res := NewOperatorGetSecretValueResult(message)
	return res, nil
}
