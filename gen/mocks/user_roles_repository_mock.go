// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositorymocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRolesRepository creates a new instance of MockUserRolesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRolesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRolesRepository {
	mock := &MockUserRolesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRolesRepository is an autogenerated mock type for the UserRolesRepository type
type MockUserRolesRepository struct {
	mock.Mock
}

type MockUserRolesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRolesRepository) EXPECT() *MockUserRolesRepository_Expecter {
	return &MockUserRolesRepository_Expecter{mock: &_m.Mock}
}

// AssignRoleToUser provides a mock function for the type MockUserRolesRepository
func (_mock *MockUserRolesRepository) AssignRoleToUser(ctx context.Context, userID int, roleID int) error {
	ret := _mock.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AssignRoleToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = returnFunc(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRolesRepository_AssignRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRoleToUser'
type MockUserRolesRepository_AssignRoleToUser_Call struct {
	*mock.Call
}

// AssignRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - roleID int
func (_e *MockUserRolesRepository_Expecter) AssignRoleToUser(ctx interface{}, userID interface{}, roleID interface{}) *MockUserRolesRepository_AssignRoleToUser_Call {
	return &MockUserRolesRepository_AssignRoleToUser_Call{Call: _e.mock.On("AssignRoleToUser", ctx, userID, roleID)}
}

func (_c *MockUserRolesRepository_AssignRoleToUser_Call) Run(run func(ctx context.Context, userID int, roleID int)) *MockUserRolesRepository_AssignRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserRolesRepository_AssignRoleToUser_Call) Return(err error) *MockUserRolesRepository_AssignRoleToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRolesRepository_AssignRoleToUser_Call) RunAndReturn(run func(ctx context.Context, userID int, roleID int) error) *MockUserRolesRepository_AssignRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoleIDs provides a mock function for the type MockUserRolesRepository
func (_mock *MockUserRolesRepository) GetUserRoleIDs(ctx context.Context, userID int) ([]int, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleIDs")
	}

	var r0 []int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]int, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRolesRepository_GetUserRoleIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoleIDs'
type MockUserRolesRepository_GetUserRoleIDs_Call struct {
	*mock.Call
}

// GetUserRoleIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockUserRolesRepository_Expecter) GetUserRoleIDs(ctx interface{}, userID interface{}) *MockUserRolesRepository_GetUserRoleIDs_Call {
	return &MockUserRolesRepository_GetUserRoleIDs_Call{Call: _e.mock.On("GetUserRoleIDs", ctx, userID)}
}

func (_c *MockUserRolesRepository_GetUserRoleIDs_Call) Run(run func(ctx context.Context, userID int)) *MockUserRolesRepository_GetUserRoleIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRolesRepository_GetUserRoleIDs_Call) Return(ints []int, err error) *MockUserRolesRepository_GetUserRoleIDs_Call {
	_c.Call.Return(ints, err)
	return _c
}

func (_c *MockUserRolesRepository_GetUserRoleIDs_Call) RunAndReturn(run func(ctx context.Context, userID int) ([]int, error)) *MockUserRolesRepository_GetUserRoleIDs_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromUser provides a mock function for the type MockUserRolesRepository
func (_mock *MockUserRolesRepository) RemoveRoleFromUser(ctx context.Context, userID int, roleID int) error {
	ret := _mock.Called(ctx, userID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = returnFunc(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRolesRepository_RemoveRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromUser'
type MockUserRolesRepository_RemoveRoleFromUser_Call struct {
	*mock.Call
}

// RemoveRoleFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - roleID int
func (_e *MockUserRolesRepository_Expecter) RemoveRoleFromUser(ctx interface{}, userID interface{}, roleID interface{}) *MockUserRolesRepository_RemoveRoleFromUser_Call {
	return &MockUserRolesRepository_RemoveRoleFromUser_Call{Call: _e.mock.On("RemoveRoleFromUser", ctx, userID, roleID)}
}

func (_c *MockUserRolesRepository_RemoveRoleFromUser_Call) Run(run func(ctx context.Context, userID int, roleID int)) *MockUserRolesRepository_RemoveRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserRolesRepository_RemoveRoleFromUser_Call) Return(err error) *MockUserRolesRepository_RemoveRoleFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRolesRepository_RemoveRoleFromUser_Call) RunAndReturn(run func(ctx context.Context, userID int, roleID int) error) *MockUserRolesRepository_RemoveRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}
