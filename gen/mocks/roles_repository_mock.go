// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositorymocks

import (
	"context"

	"github.com/Vidalee/FishyKeys/repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRolesRepository creates a new instance of MockRolesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRolesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRolesRepository {
	mock := &MockRolesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRolesRepository is an autogenerated mock type for the RolesRepository type
type MockRolesRepository struct {
	mock.Mock
}

type MockRolesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRolesRepository) EXPECT() *MockRolesRepository_Expecter {
	return &MockRolesRepository_Expecter{mock: &_m.Mock}
}

// CreateRole provides a mock function for the type MockRolesRepository
func (_mock *MockRolesRepository) CreateRole(ctx context.Context, name string, color string) error {
	ret := _mock.Called(ctx, name, color)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, name, color)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRolesRepository_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockRolesRepository_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - color string
func (_e *MockRolesRepository_Expecter) CreateRole(ctx interface{}, name interface{}, color interface{}) *MockRolesRepository_CreateRole_Call {
	return &MockRolesRepository_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, name, color)}
}

func (_c *MockRolesRepository_CreateRole_Call) Run(run func(ctx context.Context, name string, color string)) *MockRolesRepository_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRolesRepository_CreateRole_Call) Return(err error) *MockRolesRepository_CreateRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRolesRepository_CreateRole_Call) RunAndReturn(run func(ctx context.Context, name string, color string) error) *MockRolesRepository_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByID provides a mock function for the type MockRolesRepository
func (_mock *MockRolesRepository) GetRoleByID(ctx context.Context, id int) (*repository.Role, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 *repository.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*repository.Role, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *repository.Role); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRolesRepository_GetRoleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByID'
type MockRolesRepository_GetRoleByID_Call struct {
	*mock.Call
}

// GetRoleByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRolesRepository_Expecter) GetRoleByID(ctx interface{}, id interface{}) *MockRolesRepository_GetRoleByID_Call {
	return &MockRolesRepository_GetRoleByID_Call{Call: _e.mock.On("GetRoleByID", ctx, id)}
}

func (_c *MockRolesRepository_GetRoleByID_Call) Run(run func(ctx context.Context, id int)) *MockRolesRepository_GetRoleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRolesRepository_GetRoleByID_Call) Return(role *repository.Role, err error) *MockRolesRepository_GetRoleByID_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRolesRepository_GetRoleByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*repository.Role, error)) *MockRolesRepository_GetRoleByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleByName provides a mock function for the type MockRolesRepository
func (_mock *MockRolesRepository) GetRoleByName(ctx context.Context, name string) (*repository.Role, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByName")
	}

	var r0 *repository.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*repository.Role, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *repository.Role); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRolesRepository_GetRoleByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleByName'
type MockRolesRepository_GetRoleByName_Call struct {
	*mock.Call
}

// GetRoleByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRolesRepository_Expecter) GetRoleByName(ctx interface{}, name interface{}) *MockRolesRepository_GetRoleByName_Call {
	return &MockRolesRepository_GetRoleByName_Call{Call: _e.mock.On("GetRoleByName", ctx, name)}
}

func (_c *MockRolesRepository_GetRoleByName_Call) Run(run func(ctx context.Context, name string)) *MockRolesRepository_GetRoleByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRolesRepository_GetRoleByName_Call) Return(role *repository.Role, err error) *MockRolesRepository_GetRoleByName_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *MockRolesRepository_GetRoleByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*repository.Role, error)) *MockRolesRepository_GetRoleByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesByIDs provides a mock function for the type MockRolesRepository
func (_mock *MockRolesRepository) GetRolesByIDs(ctx context.Context, ids []int) ([]repository.Role, error) {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesByIDs")
	}

	var r0 []repository.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int) ([]repository.Role, error)); ok {
		return returnFunc(ctx, ids)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []int) []repository.Role); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = returnFunc(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRolesRepository_GetRolesByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesByIDs'
type MockRolesRepository_GetRolesByIDs_Call struct {
	*mock.Call
}

// GetRolesByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int
func (_e *MockRolesRepository_Expecter) GetRolesByIDs(ctx interface{}, ids interface{}) *MockRolesRepository_GetRolesByIDs_Call {
	return &MockRolesRepository_GetRolesByIDs_Call{Call: _e.mock.On("GetRolesByIDs", ctx, ids)}
}

func (_c *MockRolesRepository_GetRolesByIDs_Call) Run(run func(ctx context.Context, ids []int)) *MockRolesRepository_GetRolesByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []int
		if args[1] != nil {
			arg1 = args[1].([]int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRolesRepository_GetRolesByIDs_Call) Return(roles []repository.Role, err error) *MockRolesRepository_GetRolesByIDs_Call {
	_c.Call.Return(roles, err)
	return _c
}

func (_c *MockRolesRepository_GetRolesByIDs_Call) RunAndReturn(run func(ctx context.Context, ids []int) ([]repository.Role, error)) *MockRolesRepository_GetRolesByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function for the type MockRolesRepository
func (_mock *MockRolesRepository) ListRoles(ctx context.Context) ([]repository.Role, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 []repository.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]repository.Role, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []repository.Role); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRolesRepository_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockRolesRepository_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRolesRepository_Expecter) ListRoles(ctx interface{}) *MockRolesRepository_ListRoles_Call {
	return &MockRolesRepository_ListRoles_Call{Call: _e.mock.On("ListRoles", ctx)}
}

func (_c *MockRolesRepository_ListRoles_Call) Run(run func(ctx context.Context)) *MockRolesRepository_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRolesRepository_ListRoles_Call) Return(roles []repository.Role, err error) *MockRolesRepository_ListRoles_Call {
	_c.Call.Return(roles, err)
	return _c
}

func (_c *MockRolesRepository_ListRoles_Call) RunAndReturn(run func(ctx context.Context) ([]repository.Role, error)) *MockRolesRepository_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}
