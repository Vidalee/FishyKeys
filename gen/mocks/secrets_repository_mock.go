// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositorymocks

import (
	"context"

	"github.com/Vidalee/FishyKeys/internal/crypto"
	"github.com/Vidalee/FishyKeys/repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSecretsRepository creates a new instance of MockSecretsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretsRepository {
	mock := &MockSecretsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecretsRepository is an autogenerated mock type for the SecretsRepository type
type MockSecretsRepository struct {
	mock.Mock
}

type MockSecretsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretsRepository) EXPECT() *MockSecretsRepository_Expecter {
	return &MockSecretsRepository_Expecter{mock: &_m.Mock}
}

// CreateSecret provides a mock function for the type MockSecretsRepository
func (_mock *MockSecretsRepository) CreateSecret(ctx context.Context, keyManager *crypto.KeyManager, path string, value string) (int, error) {
	ret := _mock.Called(ctx, keyManager, path, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crypto.KeyManager, string, string) (int, error)); ok {
		return returnFunc(ctx, keyManager, path, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crypto.KeyManager, string, string) int); ok {
		r0 = returnFunc(ctx, keyManager, path, value)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *crypto.KeyManager, string, string) error); ok {
		r1 = returnFunc(ctx, keyManager, path, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretsRepository_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type MockSecretsRepository_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - keyManager *crypto.KeyManager
//   - path string
//   - value string
func (_e *MockSecretsRepository_Expecter) CreateSecret(ctx interface{}, keyManager interface{}, path interface{}, value interface{}) *MockSecretsRepository_CreateSecret_Call {
	return &MockSecretsRepository_CreateSecret_Call{Call: _e.mock.On("CreateSecret", ctx, keyManager, path, value)}
}

func (_c *MockSecretsRepository_CreateSecret_Call) Run(run func(ctx context.Context, keyManager *crypto.KeyManager, path string, value string)) *MockSecretsRepository_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *crypto.KeyManager
		if args[1] != nil {
			arg1 = args[1].(*crypto.KeyManager)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSecretsRepository_CreateSecret_Call) Return(n int, err error) *MockSecretsRepository_CreateSecret_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSecretsRepository_CreateSecret_Call) RunAndReturn(run func(ctx context.Context, keyManager *crypto.KeyManager, path string, value string) (int, error)) *MockSecretsRepository_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecret provides a mock function for the type MockSecretsRepository
func (_mock *MockSecretsRepository) DeleteSecret(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretsRepository_DeleteSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecret'
type MockSecretsRepository_DeleteSecret_Call struct {
	*mock.Call
}

// DeleteSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockSecretsRepository_Expecter) DeleteSecret(ctx interface{}, path interface{}) *MockSecretsRepository_DeleteSecret_Call {
	return &MockSecretsRepository_DeleteSecret_Call{Call: _e.mock.On("DeleteSecret", ctx, path)}
}

func (_c *MockSecretsRepository_DeleteSecret_Call) Run(run func(ctx context.Context, path string)) *MockSecretsRepository_DeleteSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecretsRepository_DeleteSecret_Call) Return(err error) *MockSecretsRepository_DeleteSecret_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretsRepository_DeleteSecret_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockSecretsRepository_DeleteSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretByPath provides a mock function for the type MockSecretsRepository
func (_mock *MockSecretsRepository) GetSecretByPath(ctx context.Context, keyManager *crypto.KeyManager, path string) (*repository.DecryptedSecret, error) {
	ret := _mock.Called(ctx, keyManager, path)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretByPath")
	}

	var r0 *repository.DecryptedSecret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crypto.KeyManager, string) (*repository.DecryptedSecret, error)); ok {
		return returnFunc(ctx, keyManager, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crypto.KeyManager, string) *repository.DecryptedSecret); ok {
		r0 = returnFunc(ctx, keyManager, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.DecryptedSecret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *crypto.KeyManager, string) error); ok {
		r1 = returnFunc(ctx, keyManager, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretsRepository_GetSecretByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretByPath'
type MockSecretsRepository_GetSecretByPath_Call struct {
	*mock.Call
}

// GetSecretByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - keyManager *crypto.KeyManager
//   - path string
func (_e *MockSecretsRepository_Expecter) GetSecretByPath(ctx interface{}, keyManager interface{}, path interface{}) *MockSecretsRepository_GetSecretByPath_Call {
	return &MockSecretsRepository_GetSecretByPath_Call{Call: _e.mock.On("GetSecretByPath", ctx, keyManager, path)}
}

func (_c *MockSecretsRepository_GetSecretByPath_Call) Run(run func(ctx context.Context, keyManager *crypto.KeyManager, path string)) *MockSecretsRepository_GetSecretByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *crypto.KeyManager
		if args[1] != nil {
			arg1 = args[1].(*crypto.KeyManager)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretsRepository_GetSecretByPath_Call) Return(decryptedSecret *repository.DecryptedSecret, err error) *MockSecretsRepository_GetSecretByPath_Call {
	_c.Call.Return(decryptedSecret, err)
	return _c
}

func (_c *MockSecretsRepository_GetSecretByPath_Call) RunAndReturn(run func(ctx context.Context, keyManager *crypto.KeyManager, path string) (*repository.DecryptedSecret, error)) *MockSecretsRepository_GetSecretByPath_Call {
	_c.Call.Return(run)
	return _c
}

// HasAccess provides a mock function for the type MockSecretsRepository
func (_mock *MockSecretsRepository) HasAccess(ctx context.Context, secretPath string, userID *int, roleIDs []int) (bool, error) {
	ret := _mock.Called(ctx, secretPath, userID, roleIDs)

	if len(ret) == 0 {
		panic("no return value specified for HasAccess")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *int, []int) (bool, error)); ok {
		return returnFunc(ctx, secretPath, userID, roleIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *int, []int) bool); ok {
		r0 = returnFunc(ctx, secretPath, userID, roleIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *int, []int) error); ok {
		r1 = returnFunc(ctx, secretPath, userID, roleIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretsRepository_HasAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAccess'
type MockSecretsRepository_HasAccess_Call struct {
	*mock.Call
}

// HasAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - secretPath string
//   - userID *int
//   - roleIDs []int
func (_e *MockSecretsRepository_Expecter) HasAccess(ctx interface{}, secretPath interface{}, userID interface{}, roleIDs interface{}) *MockSecretsRepository_HasAccess_Call {
	return &MockSecretsRepository_HasAccess_Call{Call: _e.mock.On("HasAccess", ctx, secretPath, userID, roleIDs)}
}

func (_c *MockSecretsRepository_HasAccess_Call) Run(run func(ctx context.Context, secretPath string, userID *int, roleIDs []int)) *MockSecretsRepository_HasAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *int
		if args[2] != nil {
			arg2 = args[2].(*int)
		}
		var arg3 []int
		if args[3] != nil {
			arg3 = args[3].([]int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSecretsRepository_HasAccess_Call) Return(b bool, err error) *MockSecretsRepository_HasAccess_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSecretsRepository_HasAccess_Call) RunAndReturn(run func(ctx context.Context, secretPath string, userID *int, roleIDs []int) (bool, error)) *MockSecretsRepository_HasAccess_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecrets provides a mock function for the type MockSecretsRepository
func (_mock *MockSecretsRepository) ListSecrets(ctx context.Context) ([]repository.Secret, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSecrets")
	}

	var r0 []repository.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]repository.Secret, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []repository.Secret); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretsRepository_ListSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecrets'
type MockSecretsRepository_ListSecrets_Call struct {
	*mock.Call
}

// ListSecrets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSecretsRepository_Expecter) ListSecrets(ctx interface{}) *MockSecretsRepository_ListSecrets_Call {
	return &MockSecretsRepository_ListSecrets_Call{Call: _e.mock.On("ListSecrets", ctx)}
}

func (_c *MockSecretsRepository_ListSecrets_Call) Run(run func(ctx context.Context)) *MockSecretsRepository_ListSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecretsRepository_ListSecrets_Call) Return(secrets []repository.Secret, err error) *MockSecretsRepository_ListSecrets_Call {
	_c.Call.Return(secrets, err)
	return _c
}

func (_c *MockSecretsRepository_ListSecrets_Call) RunAndReturn(run func(ctx context.Context) ([]repository.Secret, error)) *MockSecretsRepository_ListSecrets_Call {
	_c.Call.Return(run)
	return _c
}
