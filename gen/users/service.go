// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// User service manages user accounts and authentication
type Service interface {
	// Create a new user
	CreateUser(context.Context, *CreateUserPayload) (res *CreateUserResult, err error)
	// List all users
	ListUsers(context.Context) (res []*User, err error)
	// Delete a user by username
	DeleteUser(context.Context, *DeleteUserPayload) (err error)
	// Authenticate a user with username and password
	AuthUser(context.Context, *AuthUserPayload) (res *AuthUserResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "fishykeys"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"create user", "list users", "delete user", "auth user"}

// AuthUserPayload is the payload type of the users service auth user method.
type AuthUserPayload struct {
	// Username
	Username string
	// Password
	Password string
}

// AuthUserResult is the result type of the users service auth user method.
type AuthUserResult struct {
	// The username of the authenticated user
	Username *string
	// JWT or session token
	Token *string
}

// CreateUserPayload is the payload type of the users service create user
// method.
type CreateUserPayload struct {
	// Username of the new user
	Username string
	// Password (hashed or plain depending on implementation)
	Password string
}

// CreateUserResult is the result type of the users service create user method.
type CreateUserResult struct {
	// The username of the created user
	Username *string
}

// DeleteUserPayload is the payload type of the users service delete user
// method.
type DeleteUserPayload struct {
	// Username of the user to delete
	Username string
}

type User struct {
	// The username
	Username string
	// User creation timestamp
	CreatedAt string
	// User last update timestamp
	UpdatedAt string
}

// Internal server error
type InternalError string

// Invalid username or password
type Unauthorized string

// User does not exist
type UserNotFound string

// Username already exists
type UsernameTaken string

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Invalid username or password"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e UserNotFound) Error() string {
	return "User does not exist"
}

// ErrorName returns "user_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UserNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "user_not_found".
func (e UserNotFound) GoaErrorName() string {
	return "user_not_found"
}

// Error returns an error description.
func (e UsernameTaken) Error() string {
	return "Username already exists"
}

// ErrorName returns "username_taken".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UsernameTaken) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "username_taken".
func (e UsernameTaken) GoaErrorName() string {
	return "username_taken"
}

// MakeInvalidInput builds a goa.ServiceError from an error.
func MakeInvalidInput(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_input", false, false, false)
}
