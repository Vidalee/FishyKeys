// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users endpoints
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "users" service endpoints.
type Endpoints struct {
	Create goa.Endpoint
	List   goa.Endpoint
	Delete goa.Endpoint
	Auth   goa.Endpoint
}

// NewEndpoints wraps the methods of the "users" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Create: NewCreateEndpoint(s),
		List:   NewListEndpoint(s),
		Delete: NewDeleteEndpoint(s),
		Auth:   NewAuthEndpoint(s),
	}
}

// Use applies the given middleware to all the "users" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Create = m(e.Create)
	e.List = m(e.List)
	e.Delete = m(e.Delete)
	e.Auth = m(e.Auth)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "users".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePayload)
		return s.Create(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "users".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.List(ctx)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "users".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}

// NewAuthEndpoint returns an endpoint function that calls the method "auth" of
// service "users".
func NewAuthEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthPayload)
		return s.Auth(ctx, p)
	}
}
