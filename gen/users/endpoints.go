// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users endpoints
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "users" service endpoints.
type Endpoints struct {
	CreateUser goa.Endpoint
	ListUsers  goa.Endpoint
	DeleteUser goa.Endpoint
	AuthUser   goa.Endpoint
}

// NewEndpoints wraps the methods of the "users" service with endpoints.
func NewEndpoints(s Service, si ServerInterceptors) *Endpoints {
	endpoints := &Endpoints{
		CreateUser: NewCreateUserEndpoint(s),
		ListUsers:  NewListUsersEndpoint(s),
		DeleteUser: NewDeleteUserEndpoint(s),
		AuthUser:   NewAuthUserEndpoint(s),
	}
	endpoints.ListUsers = WrapListUsersEndpoint(endpoints.ListUsers, si)
	return endpoints
}

// Use applies the given middleware to all the "users" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateUser = m(e.CreateUser)
	e.ListUsers = m(e.ListUsers)
	e.DeleteUser = m(e.DeleteUser)
	e.AuthUser = m(e.AuthUser)
}

// NewCreateUserEndpoint returns an endpoint function that calls the method
// "create user" of service "users".
func NewCreateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateUserPayload)
		return s.CreateUser(ctx, p)
	}
}

// NewListUsersEndpoint returns an endpoint function that calls the method
// "list users" of service "users".
func NewListUsersEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListUsers(ctx)
	}
}

// NewDeleteUserEndpoint returns an endpoint function that calls the method
// "delete user" of service "users".
func NewDeleteUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteUserPayload)
		return nil, s.DeleteUser(ctx, p)
	}
}

// NewAuthUserEndpoint returns an endpoint function that calls the method "auth
// user" of service "users".
func NewAuthUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthUserPayload)
		return s.AuthUser(ctx, p)
	}
}
