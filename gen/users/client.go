// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users client
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "users" service client.
type Client struct {
	CreateEndpoint goa.Endpoint
	ListEndpoint   goa.Endpoint
	DeleteEndpoint goa.Endpoint
	AuthEndpoint   goa.Endpoint
}

// NewClient initializes a "users" service client given the endpoints.
func NewClient(create, list, delete_, auth goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint: create,
		ListEndpoint:   list,
		DeleteEndpoint: delete_,
		AuthEndpoint:   auth,
	}
}

// Create calls the "create" endpoint of the "users" service.
// Create may return the following errors:
//   - "username_taken" (type UsernameTaken)
//   - "invalid_input" (type InvalidInput)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) Create(ctx context.Context, p *CreatePayload) (res *CreateResult, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateResult), nil
}

// List calls the "list" endpoint of the "users" service.
// List may return the following errors:
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) List(ctx context.Context) (res []*User, err error) {
	var ires any
	ires, err = c.ListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]*User), nil
}

// Delete calls the "delete" endpoint of the "users" service.
// Delete may return the following errors:
//   - "user_not_found" (type UserNotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}

// Auth calls the "auth" endpoint of the "users" service.
// Auth may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) Auth(ctx context.Context, p *AuthPayload) (res *AuthResult, err error) {
	var ires any
	ires, err = c.AuthEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AuthResult), nil
}
