// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets service
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package secrets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// User service manages user accounts and authentication
type Service interface {
	// Retrieve all secrets you have access to
	ListSecrets(context.Context) (res []*SecretInfoSummary, err error)
	// Retrieve a secret value
	GetSecretValue(context.Context, *GetSecretValuePayload) (res *GetSecretValueResult, err error)
	// Retrieve a secret's information
	GetSecret(context.Context, *GetSecretPayload) (res *SecretInfo, err error)
	// Create a secret
	CreateSecret(context.Context, *CreateSecretPayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "fishykeys"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "secrets"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"list secrets", "get secret value", "get secret", "create secret"}

// CreateSecretPayload is the payload type of the secrets service create secret
// method.
type CreateSecretPayload struct {
	// Base64 encoded secret's path
	Path string
	// The secret value
	Value string
	// Users IDs authorized to access the secret
	AuthorizedUsers []int
	// Role IDs authorized to access the secret
	AuthorizedRoles []int
}

// GetSecretPayload is the payload type of the secrets service get secret
// method.
type GetSecretPayload struct {
	// Base64 encoded secret's path
	Path string
}

// GetSecretValuePayload is the payload type of the secrets service get secret
// value method.
type GetSecretValuePayload struct {
	// Base64 encoded secret's path
	Path string
}

// GetSecretValueResult is the result type of the secrets service get secret
// value method.
type GetSecretValueResult struct {
	// The secret value
	Value *string
	// The original path of the secret
	Path *string
}

type RoleType struct {
	// Unique identifier for the role
	ID int
	// Name of the role
	Name string
}

// The secret's information
type SecretInfo struct {
	// The original path of the secret
	Path string
	// The owner of the secret
	Owner *User
	// Members authorized to access the secret
	AuthorizedUsers []*User
	// Roles authorized to access the secret
	AuthorizedRoles []*RoleType
	// Creation timestamp of the secret
	CreatedAt string
	// Last update timestamp of the secret
	UpdatedAt string
}

type SecretInfoSummary struct {
	// The original path of the secret
	Path string
	// The owner of the secret
	Owner *User
	// Creation timestamp of the secret
	CreatedAt string
	// Last update timestamp of the secret
	UpdatedAt string
}

type User struct {
	// Unique identifier for the user
	ID int
	// The username
	Username string
	// User creation timestamp
	CreatedAt string
	// User last update timestamp
	UpdatedAt string
}

// MakeInvalidParameters builds a goa.ServiceError from an error.
func MakeInvalidParameters(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_parameters", false, false, false)
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "forbidden", false, false, false)
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "internal_error", false, false, false)
}

// MakeSecretNotFound builds a goa.ServiceError from an error.
func MakeSecretNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "secret_not_found", false, false, false)
}
