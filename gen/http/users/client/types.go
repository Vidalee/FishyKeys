// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	users "github.com/Vidalee/FishyKeys/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Username of the new user
	Username string `form:"username" json:"username" xml:"username"`
	// Password (hashed or plain depending on implementation)
	Password string `form:"password" json:"password" xml:"password"`
}

// AuthRequestBody is the type of the "users" service "auth" endpoint HTTP
// request body.
type AuthRequestBody struct {
	// Username
	Username string `form:"username" json:"username" xml:"username"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// CreateResponseBody is the type of the "users" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// The username of the created user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody []*UserResponse

// AuthResponseBody is the type of the "users" service "auth" endpoint HTTP
// response body.
type AuthResponseBody struct {
	// The username of the authenticated user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// JWT or session token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// The username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// User creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// User last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "users" service.
func NewCreateRequestBody(p *users.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewAuthRequestBody builds the HTTP request body from the payload of the
// "auth" endpoint of the "users" service.
func NewAuthRequestBody(p *users.AuthPayload) *AuthRequestBody {
	body := &AuthRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewCreateResultCreated builds a "users" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateResultCreated(body *CreateResponseBody) *users.CreateResult {
	v := &users.CreateResult{
		Username: body.Username,
	}

	return v
}

// NewCreateInternalError builds a users service create endpoint internal_error
// error.
func NewCreateInternalError(body string) users.InternalError {
	v := users.InternalError(body)

	return v
}

// NewCreateInvalidInput builds a users service create endpoint invalid_input
// error.
func NewCreateInvalidInput(body string) users.InvalidInput {
	v := users.InvalidInput(body)

	return v
}

// NewCreateUsernameTaken builds a users service create endpoint username_taken
// error.
func NewCreateUsernameTaken(body string) users.UsernameTaken {
	v := users.UsernameTaken(body)

	return v
}

// NewListUserOK builds a "users" service "list" endpoint result from a HTTP
// "OK" response.
func NewListUserOK(body []*UserResponse) []*users.User {
	v := make([]*users.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToUsersUser(val)
	}

	return v
}

// NewListInternalError builds a users service list endpoint internal_error
// error.
func NewListInternalError(body string) users.InternalError {
	v := users.InternalError(body)

	return v
}

// NewDeleteInternalError builds a users service delete endpoint internal_error
// error.
func NewDeleteInternalError(body string) users.InternalError {
	v := users.InternalError(body)

	return v
}

// NewDeleteUserNotFound builds a users service delete endpoint user_not_found
// error.
func NewDeleteUserNotFound(body string) users.UserNotFound {
	v := users.UserNotFound(body)

	return v
}

// NewAuthResultOK builds a "users" service "auth" endpoint result from a HTTP
// "OK" response.
func NewAuthResultOK(body *AuthResponseBody) *users.AuthResult {
	v := &users.AuthResult{
		Username: body.Username,
		Token:    body.Token,
	}

	return v
}

// NewAuthInternalError builds a users service auth endpoint internal_error
// error.
func NewAuthInternalError(body string) users.InternalError {
	v := users.InternalError(body)

	return v
}

// NewAuthUnauthorized builds a users service auth endpoint unauthorized error.
func NewAuthUnauthorized(body string) users.Unauthorized {
	v := users.Unauthorized(body)

	return v
}

// ValidateUserResponse runs the validations defined on UserResponse
func ValidateUserResponse(body *UserResponse) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}
