// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	users "github.com/Vidalee/FishyKeys/gen/users"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "create user" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "create user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the users
// create user server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.CreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "create user", "*users.CreateUserPayload", v)
		}
		body := NewCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "create user", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// users create user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateUserResponse may return the following errors:
//   - "username_taken" (type *goa.ServiceError): http.StatusConflict
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create user", err)
			}
			err = ValidateCreateUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create user", err)
			}
			res := NewCreateUserResultCreated(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body CreateUserUsernameTakenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create user", err)
			}
			err = ValidateCreateUserUsernameTakenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create user", err)
			}
			return nil, NewCreateUserUsernameTaken(&body)
		case http.StatusBadRequest:
			var (
				body CreateUserInvalidParametersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create user", err)
			}
			err = ValidateCreateUserInvalidParametersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create user", err)
			}
			return nil, NewCreateUserInvalidParameters(&body)
		case http.StatusInternalServerError:
			var (
				body CreateUserInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "create user", err)
			}
			err = ValidateCreateUserInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "create user", err)
			}
			return nil, NewCreateUserInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "create user", resp.StatusCode, string(body))
		}
	}
}

// BuildListUsersRequest instantiates a HTTP request object with method and
// path set to call the "users" service "list users" endpoint
func (c *Client) BuildListUsersRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListUsersUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "list users", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListUsersResponse returns a decoder for responses returned by the
// users list users endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListUsersResponse may return the following errors:
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeListUsersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListUsersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list users", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateUserResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list users", err)
			}
			res := NewListUsersUserOK(body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body ListUsersInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list users", err)
			}
			err = ValidateListUsersInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list users", err)
			}
			return nil, NewListUsersInternalError(&body)
		case http.StatusUnauthorized:
			var (
				body ListUsersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "list users", err)
			}
			err = ValidateListUsersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "list users", err)
			}
			return nil, NewListUsersUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "list users", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "delete user" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		username string
	)
	{
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "delete user", "*users.DeleteUserPayload", v)
		}
		username = p.Username
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUsersPath(username)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "delete user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// users delete user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteUserResponse may return the following errors:
//   - "user_not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteUserUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete user", err)
			}
			err = ValidateDeleteUserUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete user", err)
			}
			return nil, NewDeleteUserUserNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteUserInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete user", err)
			}
			err = ValidateDeleteUserInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete user", err)
			}
			return nil, NewDeleteUserInternalError(&body)
		case http.StatusBadRequest:
			var (
				body DeleteUserInvalidParametersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete user", err)
			}
			err = ValidateDeleteUserInvalidParametersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete user", err)
			}
			return nil, NewDeleteUserInvalidParameters(&body)
		case http.StatusForbidden:
			var (
				body DeleteUserForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete user", err)
			}
			err = ValidateDeleteUserForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete user", err)
			}
			return nil, NewDeleteUserForbidden(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "delete user", err)
			}
			err = ValidateDeleteUserUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "delete user", err)
			}
			return nil, NewDeleteUserUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "delete user", resp.StatusCode, string(body))
		}
	}
}

// BuildAuthUserRequest instantiates a HTTP request object with method and path
// set to call the "users" service "auth user" endpoint
func (c *Client) BuildAuthUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthUserUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "auth user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthUserRequest returns an encoder for requests sent to the users auth
// user server.
func EncodeAuthUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.AuthUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "auth user", "*users.AuthUserPayload", v)
		}
		body := NewAuthUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "auth user", err)
		}
		return nil
	}
}

// DecodeAuthUserResponse returns a decoder for responses returned by the users
// auth user endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAuthUserResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeAuthUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AuthUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "auth user", err)
			}
			res := NewAuthUserResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AuthUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "auth user", err)
			}
			err = ValidateAuthUserUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "auth user", err)
			}
			return nil, NewAuthUserUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body AuthUserInvalidParametersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "auth user", err)
			}
			err = ValidateAuthUserInvalidParametersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "auth user", err)
			}
			return nil, NewAuthUserInvalidParameters(&body)
		case http.StatusInternalServerError:
			var (
				body AuthUserInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "auth user", err)
			}
			err = ValidateAuthUserInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "auth user", err)
			}
			return nil, NewAuthUserInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "auth user", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOperatorTokenRequest instantiates a HTTP request object with method
// and path set to call the "users" service "get operator token" endpoint
func (c *Client) BuildGetOperatorTokenRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOperatorTokenUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "get operator token", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetOperatorTokenResponse returns a decoder for responses returned by
// the users get operator token endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetOperatorTokenResponse may return the following errors:
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetOperatorTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOperatorTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get operator token", err)
			}
			res := NewGetOperatorTokenResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetOperatorTokenInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get operator token", err)
			}
			err = ValidateGetOperatorTokenInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get operator token", err)
			}
			return nil, NewGetOperatorTokenInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "get operator token", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseToUsersUser builds a value of type *users.User from a
// value of type *UserResponse.
func unmarshalUserResponseToUsersUser(v *UserResponse) *users.User {
	res := &users.User{
		ID:        *v.ID,
		Username:  *v.Username,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}
