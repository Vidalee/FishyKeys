// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"encoding/json"
	"fmt"

	users "github.com/Vidalee/FishyKeys/gen/users"
)

// BuildCreateUserPayload builds the payload for the users create user endpoint
// from CLI flags.
func BuildCreateUserPayload(usersCreateUserBody string) (*users.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"s3cr3t\",\n      \"username\": \"alice\"\n   }'")
		}
	}
	v := &users.CreateUserPayload{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the users delete user endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserUsername string) (*users.DeleteUserPayload, error) {
	var username string
	{
		username = usersDeleteUserUsername
	}
	v := &users.DeleteUserPayload{}
	v.Username = username

	return v, nil
}

// BuildAuthUserPayload builds the payload for the users auth user endpoint
// from CLI flags.
func BuildAuthUserPayload(usersAuthUserBody string) (*users.AuthUserPayload, error) {
	var err error
	var body AuthUserRequestBody
	{
		err = json.Unmarshal([]byte(usersAuthUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"s3cr3t\",\n      \"username\": \"alice\"\n   }'")
		}
	}
	v := &users.AuthUserPayload{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}
