// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users client HTTP transport
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the users service endpoint HTTP clients.
type Client struct {
	// CreateUser Doer is the HTTP client used to make requests to the create user
	// endpoint.
	CreateUserDoer goahttp.Doer

	// ListUsers Doer is the HTTP client used to make requests to the list users
	// endpoint.
	ListUsersDoer goahttp.Doer

	// DeleteUser Doer is the HTTP client used to make requests to the delete user
	// endpoint.
	DeleteUserDoer goahttp.Doer

	// AuthUser Doer is the HTTP client used to make requests to the auth user
	// endpoint.
	AuthUserDoer goahttp.Doer

	// GetOperatorToken Doer is the HTTP client used to make requests to the get
	// operator token endpoint.
	GetOperatorTokenDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the users service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateUserDoer:       doer,
		ListUsersDoer:        doer,
		DeleteUserDoer:       doer,
		AuthUserDoer:         doer,
		GetOperatorTokenDoer: doer,
		CORSDoer:             doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// CreateUser returns an endpoint that makes HTTP requests to the users service
// create user server.
func (c *Client) CreateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserRequest(c.encoder)
		decodeResponse = DecodeCreateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "create user", err)
		}
		return decodeResponse(resp)
	}
}

// ListUsers returns an endpoint that makes HTTP requests to the users service
// list users server.
func (c *Client) ListUsers() goa.Endpoint {
	var (
		decodeResponse = DecodeListUsersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListUsersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListUsersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "list users", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteUser returns an endpoint that makes HTTP requests to the users service
// delete user server.
func (c *Client) DeleteUser() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "delete user", err)
		}
		return decodeResponse(resp)
	}
}

// AuthUser returns an endpoint that makes HTTP requests to the users service
// auth user server.
func (c *Client) AuthUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthUserRequest(c.encoder)
		decodeResponse = DecodeAuthUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "auth user", err)
		}
		return decodeResponse(resp)
	}
}

// GetOperatorToken returns an endpoint that makes HTTP requests to the users
// service get operator token server.
func (c *Client) GetOperatorToken() goa.Endpoint {
	var (
		decodeResponse = DecodeGetOperatorTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOperatorTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOperatorTokenDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "get operator token", err)
		}
		return decodeResponse(resp)
	}
}
