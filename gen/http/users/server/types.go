// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package server

import (
	users "github.com/Vidalee/FishyKeys/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "users" service "create user"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// Username of the new user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password (hashed or plain depending on implementation)
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// AuthUserRequestBody is the type of the "users" service "auth user" endpoint
// HTTP request body.
type AuthUserRequestBody struct {
	// Username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// CreateUserResponseBody is the type of the "users" service "create user"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// The username of the created user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// ListUsersResponseBody is the type of the "users" service "list users"
// endpoint HTTP response body.
type ListUsersResponseBody []*UserResponse

// AuthUserResponseBody is the type of the "users" service "auth user" endpoint
// HTTP response body.
type AuthUserResponseBody struct {
	// The username of the authenticated user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// JWT or session token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// CreateUserInvalidParametersResponseBody is the type of the "users" service
// "create user" endpoint HTTP response body for the "invalid_parameters" error.
type CreateUserInvalidParametersResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// The username
	Username string `form:"username" json:"username" xml:"username"`
	// User creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// User last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateUserResponseBody builds the HTTP response body from the result of
// the "create user" endpoint of the "users" service.
func NewCreateUserResponseBody(res *users.CreateUserResult) *CreateUserResponseBody {
	body := &CreateUserResponseBody{
		Username: res.Username,
	}
	return body
}

// NewListUsersResponseBody builds the HTTP response body from the result of
// the "list users" endpoint of the "users" service.
func NewListUsersResponseBody(res []*users.User) ListUsersResponseBody {
	body := make([]*UserResponse, len(res))
	for i, val := range res {
		body[i] = marshalUsersUserToUserResponse(val)
	}
	return body
}

// NewAuthUserResponseBody builds the HTTP response body from the result of the
// "auth user" endpoint of the "users" service.
func NewAuthUserResponseBody(res *users.AuthUserResult) *AuthUserResponseBody {
	body := &AuthUserResponseBody{
		Username: res.Username,
		Token:    res.Token,
	}
	return body
}

// NewCreateUserInvalidParametersResponseBody builds the HTTP response body
// from the result of the "create user" endpoint of the "users" service.
func NewCreateUserInvalidParametersResponseBody(res *goa.ServiceError) *CreateUserInvalidParametersResponseBody {
	body := &CreateUserInvalidParametersResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserPayload builds a users service create user endpoint payload.
func NewCreateUserPayload(body *CreateUserRequestBody) *users.CreateUserPayload {
	v := &users.CreateUserPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewDeleteUserPayload builds a users service delete user endpoint payload.
func NewDeleteUserPayload(username string) *users.DeleteUserPayload {
	v := &users.DeleteUserPayload{}
	v.Username = username

	return v
}

// NewAuthUserPayload builds a users service auth user endpoint payload.
func NewAuthUserPayload(body *AuthUserRequestBody) *users.AuthUserPayload {
	v := &users.AuthUserPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on Create
// UserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateAuthUserRequestBody runs the validations defined on Auth
// UserRequestBody
func ValidateAuthUserRequestBody(body *AuthUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
