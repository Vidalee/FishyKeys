// Code generated by goa v3.21.1, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package server

import (
	users "github.com/Vidalee/FishyKeys/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Username of the new user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password (hashed or plain depending on implementation)
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// AuthRequestBody is the type of the "users" service "auth" endpoint HTTP
// request body.
type AuthRequestBody struct {
	// Username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// CreateResponseBody is the type of the "users" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// The username of the created user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody []*UserResponse

// AuthResponseBody is the type of the "users" service "auth" endpoint HTTP
// response body.
type AuthResponseBody struct {
	// The username of the authenticated user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// JWT or session token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// The username
	Username string `form:"username" json:"username" xml:"username"`
	// User creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// User last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "users" service.
func NewCreateResponseBody(res *users.CreateResult) *CreateResponseBody {
	body := &CreateResponseBody{
		Username: res.Username,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "users" service.
func NewListResponseBody(res []*users.User) ListResponseBody {
	body := make([]*UserResponse, len(res))
	for i, val := range res {
		body[i] = marshalUsersUserToUserResponse(val)
	}
	return body
}

// NewAuthResponseBody builds the HTTP response body from the result of the
// "auth" endpoint of the "users" service.
func NewAuthResponseBody(res *users.AuthResult) *AuthResponseBody {
	body := &AuthResponseBody{
		Username: res.Username,
		Token:    res.Token,
	}
	return body
}

// NewCreatePayload builds a users service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *users.CreatePayload {
	v := &users.CreatePayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewDeletePayload builds a users service delete endpoint payload.
func NewDeletePayload(username string) *users.DeletePayload {
	v := &users.DeletePayload{}
	v.Username = username

	return v
}

// NewAuthPayload builds a users service auth endpoint payload.
func NewAuthPayload(body *AuthRequestBody) *users.AuthPayload {
	v := &users.AuthPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateAuthRequestBody runs the validations defined on AuthRequestBody
func ValidateAuthRequestBody(body *AuthRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
