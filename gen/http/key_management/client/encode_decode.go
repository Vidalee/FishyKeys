// Code generated by goa v3.21.1, DO NOT EDIT.
//
// key_management HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	keymanagement "github.com/Vidalee/FishyKeys/gen/key_management"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateMasterKeyRequest instantiates a HTTP request object with method
// and path set to call the "key_management" service "create_master_key"
// endpoint
func (c *Client) BuildCreateMasterKeyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateMasterKeyKeyManagementPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("key_management", "create_master_key", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateMasterKeyRequest returns an encoder for requests sent to the
// key_management create_master_key server.
func EncodeCreateMasterKeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keymanagement.CreateMasterKeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("key_management", "create_master_key", "*keymanagement.CreateMasterKeyPayload", v)
		}
		body := NewCreateMasterKeyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("key_management", "create_master_key", err)
		}
		return nil
	}
}

// DecodeCreateMasterKeyResponse returns a decoder for responses returned by
// the key_management create_master_key endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateMasterKeyResponse may return the following errors:
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - "key_already_exists" (type *goa.ServiceError): http.StatusConflict
//   - error: internal error
func DecodeCreateMasterKeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateMasterKeyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "create_master_key", err)
			}
			res := NewCreateMasterKeyResultCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateMasterKeyInvalidParametersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "create_master_key", err)
			}
			err = ValidateCreateMasterKeyInvalidParametersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "create_master_key", err)
			}
			return nil, NewCreateMasterKeyInvalidParameters(&body)
		case http.StatusInternalServerError:
			var (
				body CreateMasterKeyInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "create_master_key", err)
			}
			err = ValidateCreateMasterKeyInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "create_master_key", err)
			}
			return nil, NewCreateMasterKeyInternalError(&body)
		case http.StatusConflict:
			var (
				body CreateMasterKeyKeyAlreadyExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "create_master_key", err)
			}
			err = ValidateCreateMasterKeyKeyAlreadyExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "create_master_key", err)
			}
			return nil, NewCreateMasterKeyKeyAlreadyExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("key_management", "create_master_key", resp.StatusCode, string(body))
		}
	}
}

// BuildGetKeyStatusRequest instantiates a HTTP request object with method and
// path set to call the "key_management" service "get_key_status" endpoint
func (c *Client) BuildGetKeyStatusRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetKeyStatusKeyManagementPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("key_management", "get_key_status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetKeyStatusResponse returns a decoder for responses returned by the
// key_management get_key_status endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetKeyStatusResponse may return the following errors:
//   - "no_key_set" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetKeyStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetKeyStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "get_key_status", err)
			}
			err = ValidateGetKeyStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "get_key_status", err)
			}
			res := NewGetKeyStatusResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetKeyStatusNoKeySetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "get_key_status", err)
			}
			err = ValidateGetKeyStatusNoKeySetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "get_key_status", err)
			}
			return nil, NewGetKeyStatusNoKeySet(&body)
		case http.StatusInternalServerError:
			var (
				body GetKeyStatusInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "get_key_status", err)
			}
			err = ValidateGetKeyStatusInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "get_key_status", err)
			}
			return nil, NewGetKeyStatusInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("key_management", "get_key_status", resp.StatusCode, string(body))
		}
	}
}

// BuildAddShareRequest instantiates a HTTP request object with method and path
// set to call the "key_management" service "add_share" endpoint
func (c *Client) BuildAddShareRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddShareKeyManagementPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("key_management", "add_share", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddShareRequest returns an encoder for requests sent to the
// key_management add_share server.
func EncodeAddShareRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keymanagement.AddSharePayload)
		if !ok {
			return goahttp.ErrInvalidType("key_management", "add_share", "*keymanagement.AddSharePayload", v)
		}
		body := NewAddShareRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("key_management", "add_share", err)
		}
		return nil
	}
}

// DecodeAddShareResponse returns a decoder for responses returned by the
// key_management add_share endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAddShareResponse may return the following errors:
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "could_not_recombine" (type *goa.ServiceError): http.StatusBadRequest
//   - "wrong_shares" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - "too_many_shares" (type *goa.ServiceError): http.StatusConflict
//   - "key_already_unlocked" (type *goa.ServiceError): http.StatusConflict
//   - "no_key_set" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeAddShareResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AddShareResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
			}
			err = ValidateAddShareResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "add_share", err)
			}
			res := NewAddShareResultCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invalid_parameters":
				var (
					body AddShareInvalidParametersResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
				}
				err = ValidateAddShareInvalidParametersResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("key_management", "add_share", err)
				}
				return nil, NewAddShareInvalidParameters(&body)
			case "could_not_recombine":
				var (
					body AddShareCouldNotRecombineResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
				}
				err = ValidateAddShareCouldNotRecombineResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("key_management", "add_share", err)
				}
				return nil, NewAddShareCouldNotRecombine(&body)
			case "wrong_shares":
				var (
					body AddShareWrongSharesResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
				}
				err = ValidateAddShareWrongSharesResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("key_management", "add_share", err)
				}
				return nil, NewAddShareWrongShares(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("key_management", "add_share", resp.StatusCode, string(body))
			}
		case http.StatusInternalServerError:
			var (
				body AddShareInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
			}
			err = ValidateAddShareInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "add_share", err)
			}
			return nil, NewAddShareInternalError(&body)
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "too_many_shares":
				var (
					body AddShareTooManySharesResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
				}
				err = ValidateAddShareTooManySharesResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("key_management", "add_share", err)
				}
				return nil, NewAddShareTooManyShares(&body)
			case "key_already_unlocked":
				var (
					body AddShareKeyAlreadyUnlockedResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
				}
				err = ValidateAddShareKeyAlreadyUnlockedResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("key_management", "add_share", err)
				}
				return nil, NewAddShareKeyAlreadyUnlocked(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("key_management", "add_share", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body AddShareNoKeySetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "add_share", err)
			}
			err = ValidateAddShareNoKeySetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "add_share", err)
			}
			return nil, NewAddShareNoKeySet(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("key_management", "add_share", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteShareRequest instantiates a HTTP request object with method and
// path set to call the "key_management" service "delete_share" endpoint
func (c *Client) BuildDeleteShareRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteShareKeyManagementPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("key_management", "delete_share", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteShareRequest returns an encoder for requests sent to the
// key_management delete_share server.
func EncodeDeleteShareRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*keymanagement.DeleteSharePayload)
		if !ok {
			return goahttp.ErrInvalidType("key_management", "delete_share", "*keymanagement.DeleteSharePayload", v)
		}
		body := NewDeleteShareRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("key_management", "delete_share", err)
		}
		return nil
	}
}

// DecodeDeleteShareResponse returns a decoder for responses returned by the
// key_management delete_share endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteShareResponse may return the following errors:
//   - "no_key_set" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - "key_already_unlocked" (type *goa.ServiceError): http.StatusConflict
//   - "wrong_index" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteShareResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteShareNoKeySetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "delete_share", err)
			}
			err = ValidateDeleteShareNoKeySetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "delete_share", err)
			}
			return nil, NewDeleteShareNoKeySet(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteShareInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "delete_share", err)
			}
			err = ValidateDeleteShareInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "delete_share", err)
			}
			return nil, NewDeleteShareInternalError(&body)
		case http.StatusConflict:
			var (
				body DeleteShareKeyAlreadyUnlockedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "delete_share", err)
			}
			err = ValidateDeleteShareKeyAlreadyUnlockedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "delete_share", err)
			}
			return nil, NewDeleteShareKeyAlreadyUnlocked(&body)
		case http.StatusBadRequest:
			var (
				body DeleteShareWrongIndexResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("key_management", "delete_share", err)
			}
			err = ValidateDeleteShareWrongIndexResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("key_management", "delete_share", err)
			}
			return nil, NewDeleteShareWrongIndex(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("key_management", "delete_share", resp.StatusCode, string(body))
		}
	}
}
