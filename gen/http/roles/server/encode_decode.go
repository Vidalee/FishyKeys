// Code generated by goa v3.21.1, DO NOT EDIT.
//
// roles HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package server

import (
	"context"
	"errors"
	"net/http"

	roles "github.com/Vidalee/FishyKeys/gen/roles"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListRolesResponse returns an encoder for responses returned by the
// roles list roles endpoint.
func EncodeListRolesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*roles.Role)
		enc := encoder(ctx, w)
		body := NewListRolesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeListRolesError returns an encoder for errors returned by the list
// roles roles endpoint.
func EncodeListRolesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "internal_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListRolesInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListRolesUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalRolesRoleToRoleResponse builds a value of type *RoleResponse from a
// value of type *roles.Role.
func marshalRolesRoleToRoleResponse(v *roles.Role) *RoleResponse {
	res := &RoleResponse{
		ID:        v.ID,
		Name:      v.Name,
		Color:     v.Color,
		Admin:     v.Admin,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}
