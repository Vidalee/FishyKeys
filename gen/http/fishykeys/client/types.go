// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys HTTP client types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/backend/design

package client

import (
	fishykeys "github.com/Vidalee/FishyKeys/gen/fishykeys"
	goa "goa.design/goa/v3/pkg"
)

// CreateMasterKeyRequestBody is the type of the "fishykeys" service
// "create_master_key" endpoint HTTP request body.
type CreateMasterKeyRequestBody struct {
	// Total number of shares to create
	TotalShares int `form:"total_shares" json:"total_shares" xml:"total_shares"`
	// Minimum number of shares required to reconstruct the key
	MinShares int `form:"min_shares" json:"min_shares" xml:"min_shares"`
}

// AddShareRequestBody is the type of the "fishykeys" service "add_share"
// endpoint HTTP request body.
type AddShareRequestBody struct {
	// One of the shares need to unlock the master key
	Share string `form:"share" json:"share" xml:"share"`
}

// DeleteShareRequestBody is the type of the "fishykeys" service "delete_share"
// endpoint HTTP request body.
type DeleteShareRequestBody struct {
	// The index of the share to delete
	Index int `form:"index" json:"index" xml:"index"`
}

// CreateMasterKeyResponseBody is the type of the "fishykeys" service
// "create_master_key" endpoint HTTP response body.
type CreateMasterKeyResponseBody struct {
	// The generated key shares
	Shares []string `form:"shares,omitempty" json:"shares,omitempty" xml:"shares,omitempty"`
}

// GetKeyStatusResponseBody is the type of the "fishykeys" service
// "get_key_status" endpoint HTTP response body.
type GetKeyStatusResponseBody struct {
	// Whether the key is currently locked
	IsLocked *bool `form:"is_locked,omitempty" json:"is_locked,omitempty" xml:"is_locked,omitempty"`
	// Number of shares currently held
	CurrentShares *int `form:"current_shares,omitempty" json:"current_shares,omitempty" xml:"current_shares,omitempty"`
	// Minimum number of shares required
	MinShares *int `form:"min_shares,omitempty" json:"min_shares,omitempty" xml:"min_shares,omitempty"`
	// Total number of shares
	TotalShares *int `form:"total_shares,omitempty" json:"total_shares,omitempty" xml:"total_shares,omitempty"`
}

// AddShareResponseBody is the type of the "fishykeys" service "add_share"
// endpoint HTTP response body.
type AddShareResponseBody struct {
	// The index of the share added
	Index *int `form:"index,omitempty" json:"index,omitempty" xml:"index,omitempty"`
	// Whether the master key has been unlocked
	Unlocked *bool `form:"unlocked,omitempty" json:"unlocked,omitempty" xml:"unlocked,omitempty"`
}

// NewCreateMasterKeyRequestBody builds the HTTP request body from the payload
// of the "create_master_key" endpoint of the "fishykeys" service.
func NewCreateMasterKeyRequestBody(p *fishykeys.CreateMasterKeyPayload) *CreateMasterKeyRequestBody {
	body := &CreateMasterKeyRequestBody{
		TotalShares: p.TotalShares,
		MinShares:   p.MinShares,
	}
	return body
}

// NewAddShareRequestBody builds the HTTP request body from the payload of the
// "add_share" endpoint of the "fishykeys" service.
func NewAddShareRequestBody(p *fishykeys.AddSharePayload) *AddShareRequestBody {
	body := &AddShareRequestBody{
		Share: p.Share,
	}
	return body
}

// NewDeleteShareRequestBody builds the HTTP request body from the payload of
// the "delete_share" endpoint of the "fishykeys" service.
func NewDeleteShareRequestBody(p *fishykeys.DeleteSharePayload) *DeleteShareRequestBody {
	body := &DeleteShareRequestBody{
		Index: p.Index,
	}
	return body
}

// NewCreateMasterKeyResultCreated builds a "fishykeys" service
// "create_master_key" endpoint result from a HTTP "Created" response.
func NewCreateMasterKeyResultCreated(body *CreateMasterKeyResponseBody) *fishykeys.CreateMasterKeyResult {
	v := &fishykeys.CreateMasterKeyResult{}
	if body.Shares != nil {
		v.Shares = make([]string, len(body.Shares))
		for i, val := range body.Shares {
			v.Shares[i] = val
		}
	}

	return v
}

// NewCreateMasterKeyInternalError builds a fishykeys service create_master_key
// endpoint internal_error error.
func NewCreateMasterKeyInternalError(body string) fishykeys.InternalError {
	v := fishykeys.InternalError(body)

	return v
}

// NewCreateMasterKeyInvalidParameters builds a fishykeys service
// create_master_key endpoint invalid_parameters error.
func NewCreateMasterKeyInvalidParameters(body string) fishykeys.InvalidParameters {
	v := fishykeys.InvalidParameters(body)

	return v
}

// NewCreateMasterKeyKeyAlreadyExists builds a fishykeys service
// create_master_key endpoint key_already_exists error.
func NewCreateMasterKeyKeyAlreadyExists(body string) fishykeys.KeyAlreadyExists {
	v := fishykeys.KeyAlreadyExists(body)

	return v
}

// NewGetKeyStatusResultOK builds a "fishykeys" service "get_key_status"
// endpoint result from a HTTP "OK" response.
func NewGetKeyStatusResultOK(body *GetKeyStatusResponseBody) *fishykeys.GetKeyStatusResult {
	v := &fishykeys.GetKeyStatusResult{
		IsLocked:      *body.IsLocked,
		CurrentShares: *body.CurrentShares,
		MinShares:     *body.MinShares,
		TotalShares:   *body.TotalShares,
	}

	return v
}

// NewGetKeyStatusInternalError builds a fishykeys service get_key_status
// endpoint internal_error error.
func NewGetKeyStatusInternalError(body string) fishykeys.InternalError {
	v := fishykeys.InternalError(body)

	return v
}

// NewGetKeyStatusNoKeySet builds a fishykeys service get_key_status endpoint
// no_key_set error.
func NewGetKeyStatusNoKeySet(body string) fishykeys.NoKeySet {
	v := fishykeys.NoKeySet(body)

	return v
}

// NewAddShareResultCreated builds a "fishykeys" service "add_share" endpoint
// result from a HTTP "Created" response.
func NewAddShareResultCreated(body *AddShareResponseBody) *fishykeys.AddShareResult {
	v := &fishykeys.AddShareResult{
		Index:    *body.Index,
		Unlocked: *body.Unlocked,
	}

	return v
}

// NewAddShareCouldNotRecombine builds a fishykeys service add_share endpoint
// could_not_recombine error.
func NewAddShareCouldNotRecombine(body string) fishykeys.CouldNotRecombine {
	v := fishykeys.CouldNotRecombine(body)

	return v
}

// NewAddShareInvalidParameters builds a fishykeys service add_share endpoint
// invalid_parameters error.
func NewAddShareInvalidParameters(body string) fishykeys.InvalidParameters {
	v := fishykeys.InvalidParameters(body)

	return v
}

// NewAddShareWrongShares builds a fishykeys service add_share endpoint
// wrong_shares error.
func NewAddShareWrongShares(body string) fishykeys.WrongShares {
	v := fishykeys.WrongShares(body)

	return v
}

// NewAddShareInternalError builds a fishykeys service add_share endpoint
// internal_error error.
func NewAddShareInternalError(body string) fishykeys.InternalError {
	v := fishykeys.InternalError(body)

	return v
}

// NewAddShareKeyAlreadyUnlocked builds a fishykeys service add_share endpoint
// key_already_unlocked error.
func NewAddShareKeyAlreadyUnlocked(body string) fishykeys.KeyAlreadyUnlocked {
	v := fishykeys.KeyAlreadyUnlocked(body)

	return v
}

// NewAddShareTooManyShares builds a fishykeys service add_share endpoint
// too_many_shares error.
func NewAddShareTooManyShares(body string) fishykeys.TooManyShares {
	v := fishykeys.TooManyShares(body)

	return v
}

// NewAddShareNoKeySet builds a fishykeys service add_share endpoint no_key_set
// error.
func NewAddShareNoKeySet(body string) fishykeys.NoKeySet {
	v := fishykeys.NoKeySet(body)

	return v
}

// NewDeleteShareInternalError builds a fishykeys service delete_share endpoint
// internal_error error.
func NewDeleteShareInternalError(body string) fishykeys.InternalError {
	v := fishykeys.InternalError(body)

	return v
}

// NewDeleteShareKeyAlreadyUnlocked builds a fishykeys service delete_share
// endpoint key_already_unlocked error.
func NewDeleteShareKeyAlreadyUnlocked(body string) fishykeys.KeyAlreadyUnlocked {
	v := fishykeys.KeyAlreadyUnlocked(body)

	return v
}

// NewDeleteShareNoKeySet builds a fishykeys service delete_share endpoint
// no_key_set error.
func NewDeleteShareNoKeySet(body string) fishykeys.NoKeySet {
	v := fishykeys.NoKeySet(body)

	return v
}

// NewDeleteShareWrongIndex builds a fishykeys service delete_share endpoint
// wrong_index error.
func NewDeleteShareWrongIndex(body string) fishykeys.WrongIndex {
	v := fishykeys.WrongIndex(body)

	return v
}

// ValidateGetKeyStatusResponseBody runs the validations defined on
// get_key_status_response_body
func ValidateGetKeyStatusResponseBody(body *GetKeyStatusResponseBody) (err error) {
	if body.IsLocked == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_locked", "body"))
	}
	if body.CurrentShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("current_shares", "body"))
	}
	if body.MinShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_shares", "body"))
	}
	if body.TotalShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_shares", "body"))
	}
	return
}

// ValidateAddShareResponseBody runs the validations defined on
// add_share_response_body
func ValidateAddShareResponseBody(body *AddShareResponseBody) (err error) {
	if body.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "body"))
	}
	if body.Unlocked == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("unlocked", "body"))
	}
	return
}
