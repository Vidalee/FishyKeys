// Code generated by goa v3.21.1, DO NOT EDIT.
//
// fishykeys HTTP server types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/backend/design

package server

import (
	fishykeys "github.com/Vidalee/FishyKeys/gen/fishykeys"
	goa "goa.design/goa/v3/pkg"
)

// CreateMasterKeyRequestBody is the type of the "fishykeys" service
// "create_master_key" endpoint HTTP request body.
type CreateMasterKeyRequestBody struct {
	// Total number of shares to create
	TotalShares *int `form:"total_shares,omitempty" json:"total_shares,omitempty" xml:"total_shares,omitempty"`
	// Minimum number of shares required to reconstruct the key
	MinShares *int `form:"min_shares,omitempty" json:"min_shares,omitempty" xml:"min_shares,omitempty"`
}

// AddShareRequestBody is the type of the "fishykeys" service "add_share"
// endpoint HTTP request body.
type AddShareRequestBody struct {
	// One of the shares need to unlock the master key
	Share *string `form:"share,omitempty" json:"share,omitempty" xml:"share,omitempty"`
}

// DeleteShareRequestBody is the type of the "fishykeys" service "delete_share"
// endpoint HTTP request body.
type DeleteShareRequestBody struct {
	// The index of the share to delete
	Index *int `form:"index,omitempty" json:"index,omitempty" xml:"index,omitempty"`
}

// CreateMasterKeyResponseBody is the type of the "fishykeys" service
// "create_master_key" endpoint HTTP response body.
type CreateMasterKeyResponseBody struct {
	// The generated key shares
	Shares []string `form:"shares,omitempty" json:"shares,omitempty" xml:"shares,omitempty"`
}

// GetKeyStatusResponseBody is the type of the "fishykeys" service
// "get_key_status" endpoint HTTP response body.
type GetKeyStatusResponseBody struct {
	// Whether the key is currently locked
	IsLocked bool `form:"is_locked" json:"is_locked" xml:"is_locked"`
	// Number of shares currently held
	CurrentShares int `form:"current_shares" json:"current_shares" xml:"current_shares"`
	// Minimum number of shares required
	MinShares int `form:"min_shares" json:"min_shares" xml:"min_shares"`
	// Total number of shares
	TotalShares int `form:"total_shares" json:"total_shares" xml:"total_shares"`
}

// AddShareResponseBody is the type of the "fishykeys" service "add_share"
// endpoint HTTP response body.
type AddShareResponseBody struct {
	// The index of the share added
	Index int `form:"index" json:"index" xml:"index"`
	// Whether the master key has been unlocked
	Unlocked bool `form:"unlocked" json:"unlocked" xml:"unlocked"`
}

// NewCreateMasterKeyResponseBody builds the HTTP response body from the result
// of the "create_master_key" endpoint of the "fishykeys" service.
func NewCreateMasterKeyResponseBody(res *fishykeys.CreateMasterKeyResult) *CreateMasterKeyResponseBody {
	body := &CreateMasterKeyResponseBody{}
	if res.Shares != nil {
		body.Shares = make([]string, len(res.Shares))
		for i, val := range res.Shares {
			body.Shares[i] = val
		}
	}
	return body
}

// NewGetKeyStatusResponseBody builds the HTTP response body from the result of
// the "get_key_status" endpoint of the "fishykeys" service.
func NewGetKeyStatusResponseBody(res *fishykeys.GetKeyStatusResult) *GetKeyStatusResponseBody {
	body := &GetKeyStatusResponseBody{
		IsLocked:      res.IsLocked,
		CurrentShares: res.CurrentShares,
		MinShares:     res.MinShares,
		TotalShares:   res.TotalShares,
	}
	return body
}

// NewAddShareResponseBody builds the HTTP response body from the result of the
// "add_share" endpoint of the "fishykeys" service.
func NewAddShareResponseBody(res *fishykeys.AddShareResult) *AddShareResponseBody {
	body := &AddShareResponseBody{
		Index:    res.Index,
		Unlocked: res.Unlocked,
	}
	return body
}

// NewCreateMasterKeyPayload builds a fishykeys service create_master_key
// endpoint payload.
func NewCreateMasterKeyPayload(body *CreateMasterKeyRequestBody) *fishykeys.CreateMasterKeyPayload {
	v := &fishykeys.CreateMasterKeyPayload{
		TotalShares: *body.TotalShares,
		MinShares:   *body.MinShares,
	}

	return v
}

// NewAddSharePayload builds a fishykeys service add_share endpoint payload.
func NewAddSharePayload(body *AddShareRequestBody) *fishykeys.AddSharePayload {
	v := &fishykeys.AddSharePayload{
		Share: *body.Share,
	}

	return v
}

// NewDeleteSharePayload builds a fishykeys service delete_share endpoint
// payload.
func NewDeleteSharePayload(body *DeleteShareRequestBody) *fishykeys.DeleteSharePayload {
	v := &fishykeys.DeleteSharePayload{
		Index: *body.Index,
	}

	return v
}

// ValidateCreateMasterKeyRequestBody runs the validations defined on
// create_master_key_request_body
func ValidateCreateMasterKeyRequestBody(body *CreateMasterKeyRequestBody) (err error) {
	if body.TotalShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_shares", "body"))
	}
	if body.MinShares == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_shares", "body"))
	}
	return
}

// ValidateAddShareRequestBody runs the validations defined on
// add_share_request_body
func ValidateAddShareRequestBody(body *AddShareRequestBody) (err error) {
	if body.Share == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("share", "body"))
	}
	return
}

// ValidateDeleteShareRequestBody runs the validations defined on
// delete_share_request_body
func ValidateDeleteShareRequestBody(body *DeleteShareRequestBody) (err error) {
	if body.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "body"))
	}
	return
}
