// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets HTTP server types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package server

import (
	"unicode/utf8"

	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goa "goa.design/goa/v3/pkg"
)

// CreateSecretRequestBody is the type of the "secrets" service "create secret"
// endpoint HTTP request body.
type CreateSecretRequestBody struct {
	// Base64 encoded secret's path
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// The secret value
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Members IDs authorized to access the secret
	AuthorizedMembers []int `form:"authorized_members,omitempty" json:"authorized_members,omitempty" xml:"authorized_members,omitempty"`
	// Role IDs authorized to access the secret
	AuthorizedRoles []int `form:"authorized_roles,omitempty" json:"authorized_roles,omitempty" xml:"authorized_roles,omitempty"`
}

// GetSecretValueResponseBody is the type of the "secrets" service "get secret
// value" endpoint HTTP response body.
type GetSecretValueResponseBody struct {
	// The secret value
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// The original path of the secret
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// GetSecretResponseBody is the type of the "secrets" service "get secret"
// endpoint HTTP response body.
type GetSecretResponseBody struct {
	// The original path of the secret
	Path string `form:"path" json:"path" xml:"path"`
	// The owner of the secret
	Owner *UserResponseBody `form:"owner" json:"owner" xml:"owner"`
	// Members authorized to access the secret
	AuthorizedMembers []*UserResponseBody `form:"authorized_members" json:"authorized_members" xml:"authorized_members"`
	// Roles authorized to access the secret
	AuthorizedRoles []*RoleTypeResponseBody `form:"authorized_roles" json:"authorized_roles" xml:"authorized_roles"`
	// Creation timestamp of the secret
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp of the secret
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// GetSecretValueSecretNotFoundResponseBody is the type of the "secrets"
// service "get secret value" endpoint HTTP response body for the
// "secret_not_found" error.
type GetSecretValueSecretNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretValueInvalidParametersResponseBody is the type of the "secrets"
// service "get secret value" endpoint HTTP response body for the
// "invalid_parameters" error.
type GetSecretValueInvalidParametersResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretValueUnauthorizedResponseBody is the type of the "secrets" service
// "get secret value" endpoint HTTP response body for the "unauthorized" error.
type GetSecretValueUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretValueForbiddenResponseBody is the type of the "secrets" service
// "get secret value" endpoint HTTP response body for the "forbidden" error.
type GetSecretValueForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretValueInternalErrorResponseBody is the type of the "secrets" service
// "get secret value" endpoint HTTP response body for the "internal_error"
// error.
type GetSecretValueInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretSecretNotFoundResponseBody is the type of the "secrets" service
// "get secret" endpoint HTTP response body for the "secret_not_found" error.
type GetSecretSecretNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretInvalidParametersResponseBody is the type of the "secrets" service
// "get secret" endpoint HTTP response body for the "invalid_parameters" error.
type GetSecretInvalidParametersResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretUnauthorizedResponseBody is the type of the "secrets" service "get
// secret" endpoint HTTP response body for the "unauthorized" error.
type GetSecretUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretForbiddenResponseBody is the type of the "secrets" service "get
// secret" endpoint HTTP response body for the "forbidden" error.
type GetSecretForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetSecretInternalErrorResponseBody is the type of the "secrets" service "get
// secret" endpoint HTTP response body for the "internal_error" error.
type GetSecretInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateSecretInvalidParametersResponseBody is the type of the "secrets"
// service "create secret" endpoint HTTP response body for the
// "invalid_parameters" error.
type CreateSecretInvalidParametersResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateSecretUnauthorizedResponseBody is the type of the "secrets" service
// "create secret" endpoint HTTP response body for the "unauthorized" error.
type CreateSecretUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateSecretForbiddenResponseBody is the type of the "secrets" service
// "create secret" endpoint HTTP response body for the "forbidden" error.
type CreateSecretForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateSecretInternalErrorResponseBody is the type of the "secrets" service
// "create secret" endpoint HTTP response body for the "internal_error" error.
type CreateSecretInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// The username
	Username string `form:"username" json:"username" xml:"username"`
	// User creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// User last update timestamp
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// RoleTypeResponseBody is used to define fields on response body types.
type RoleTypeResponseBody struct {
	// Unique identifier for the role
	ID int `form:"id" json:"id" xml:"id"`
	// Name of the role
	Name string `form:"name" json:"name" xml:"name"`
}

// NewGetSecretValueResponseBody builds the HTTP response body from the result
// of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueResponseBody(res *secrets.GetSecretValueResult) *GetSecretValueResponseBody {
	body := &GetSecretValueResponseBody{
		Value: res.Value,
		Path:  res.Path,
	}
	return body
}

// NewGetSecretResponseBody builds the HTTP response body from the result of
// the "get secret" endpoint of the "secrets" service.
func NewGetSecretResponseBody(res *secrets.SecretInfo) *GetSecretResponseBody {
	body := &GetSecretResponseBody{
		Path:      res.Path,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
	}
	if res.Owner != nil {
		body.Owner = marshalSecretsUserToUserResponseBody(res.Owner)
	}
	if res.AuthorizedMembers != nil {
		body.AuthorizedMembers = make([]*UserResponseBody, len(res.AuthorizedMembers))
		for i, val := range res.AuthorizedMembers {
			body.AuthorizedMembers[i] = marshalSecretsUserToUserResponseBody(val)
		}
	} else {
		body.AuthorizedMembers = []*UserResponseBody{}
	}
	if res.AuthorizedRoles != nil {
		body.AuthorizedRoles = make([]*RoleTypeResponseBody, len(res.AuthorizedRoles))
		for i, val := range res.AuthorizedRoles {
			body.AuthorizedRoles[i] = marshalSecretsRoleTypeToRoleTypeResponseBody(val)
		}
	} else {
		body.AuthorizedRoles = []*RoleTypeResponseBody{}
	}
	return body
}

// NewGetSecretValueSecretNotFoundResponseBody builds the HTTP response body
// from the result of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueSecretNotFoundResponseBody(res *goa.ServiceError) *GetSecretValueSecretNotFoundResponseBody {
	body := &GetSecretValueSecretNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretValueInvalidParametersResponseBody builds the HTTP response body
// from the result of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueInvalidParametersResponseBody(res *goa.ServiceError) *GetSecretValueInvalidParametersResponseBody {
	body := &GetSecretValueInvalidParametersResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretValueUnauthorizedResponseBody builds the HTTP response body from
// the result of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueUnauthorizedResponseBody(res *goa.ServiceError) *GetSecretValueUnauthorizedResponseBody {
	body := &GetSecretValueUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretValueForbiddenResponseBody builds the HTTP response body from
// the result of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueForbiddenResponseBody(res *goa.ServiceError) *GetSecretValueForbiddenResponseBody {
	body := &GetSecretValueForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretValueInternalErrorResponseBody builds the HTTP response body
// from the result of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueInternalErrorResponseBody(res *goa.ServiceError) *GetSecretValueInternalErrorResponseBody {
	body := &GetSecretValueInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretSecretNotFoundResponseBody builds the HTTP response body from
// the result of the "get secret" endpoint of the "secrets" service.
func NewGetSecretSecretNotFoundResponseBody(res *goa.ServiceError) *GetSecretSecretNotFoundResponseBody {
	body := &GetSecretSecretNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretInvalidParametersResponseBody builds the HTTP response body from
// the result of the "get secret" endpoint of the "secrets" service.
func NewGetSecretInvalidParametersResponseBody(res *goa.ServiceError) *GetSecretInvalidParametersResponseBody {
	body := &GetSecretInvalidParametersResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretUnauthorizedResponseBody builds the HTTP response body from the
// result of the "get secret" endpoint of the "secrets" service.
func NewGetSecretUnauthorizedResponseBody(res *goa.ServiceError) *GetSecretUnauthorizedResponseBody {
	body := &GetSecretUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretForbiddenResponseBody builds the HTTP response body from the
// result of the "get secret" endpoint of the "secrets" service.
func NewGetSecretForbiddenResponseBody(res *goa.ServiceError) *GetSecretForbiddenResponseBody {
	body := &GetSecretForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretInternalErrorResponseBody builds the HTTP response body from the
// result of the "get secret" endpoint of the "secrets" service.
func NewGetSecretInternalErrorResponseBody(res *goa.ServiceError) *GetSecretInternalErrorResponseBody {
	body := &GetSecretInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateSecretInvalidParametersResponseBody builds the HTTP response body
// from the result of the "create secret" endpoint of the "secrets" service.
func NewCreateSecretInvalidParametersResponseBody(res *goa.ServiceError) *CreateSecretInvalidParametersResponseBody {
	body := &CreateSecretInvalidParametersResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateSecretUnauthorizedResponseBody builds the HTTP response body from
// the result of the "create secret" endpoint of the "secrets" service.
func NewCreateSecretUnauthorizedResponseBody(res *goa.ServiceError) *CreateSecretUnauthorizedResponseBody {
	body := &CreateSecretUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateSecretForbiddenResponseBody builds the HTTP response body from the
// result of the "create secret" endpoint of the "secrets" service.
func NewCreateSecretForbiddenResponseBody(res *goa.ServiceError) *CreateSecretForbiddenResponseBody {
	body := &CreateSecretForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateSecretInternalErrorResponseBody builds the HTTP response body from
// the result of the "create secret" endpoint of the "secrets" service.
func NewCreateSecretInternalErrorResponseBody(res *goa.ServiceError) *CreateSecretInternalErrorResponseBody {
	body := &CreateSecretInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetSecretValuePayload builds a secrets service get secret value endpoint
// payload.
func NewGetSecretValuePayload(path string) *secrets.GetSecretValuePayload {
	v := &secrets.GetSecretValuePayload{}
	v.Path = path

	return v
}

// NewGetSecretPayload builds a secrets service get secret endpoint payload.
func NewGetSecretPayload(path string) *secrets.GetSecretPayload {
	v := &secrets.GetSecretPayload{}
	v.Path = path

	return v
}

// NewCreateSecretPayload builds a secrets service create secret endpoint
// payload.
func NewCreateSecretPayload(body *CreateSecretRequestBody) *secrets.CreateSecretPayload {
	v := &secrets.CreateSecretPayload{
		Path:  *body.Path,
		Value: *body.Value,
	}
	v.AuthorizedMembers = make([]int, len(body.AuthorizedMembers))
	for i, val := range body.AuthorizedMembers {
		v.AuthorizedMembers[i] = val
	}
	v.AuthorizedRoles = make([]int, len(body.AuthorizedRoles))
	for i, val := range body.AuthorizedRoles {
		v.AuthorizedRoles[i] = val
	}

	return v
}

// ValidateCreateSecretRequestBody runs the validations defined on Create
// SecretRequestBody
func ValidateCreateSecretRequestBody(body *CreateSecretRequestBody) (err error) {
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.AuthorizedMembers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authorized_members", "body"))
	}
	if body.AuthorizedRoles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authorized_roles", "body"))
	}
	if body.Path != nil {
		if utf8.RuneCountInString(*body.Path) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.path", *body.Path, utf8.RuneCountInString(*body.Path), 2, true))
		}
	}
	if body.Value != nil {
		if utf8.RuneCountInString(*body.Value) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.value", *body.Value, utf8.RuneCountInString(*body.Value), 1, true))
		}
	}
	return
}
