// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets HTTP server
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package server

import (
	"context"
	"net/http"

	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the secrets service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	ListSecrets    http.Handler
	GetSecretValue http.Handler
	GetSecret      http.Handler
	CreateSecret   http.Handler
	CORS           http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the secrets service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *secrets.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListSecrets", "GET", "/secrets"},
			{"GetSecretValue", "GET", "/secrets/{path}/value"},
			{"GetSecret", "GET", "/secrets/{path}"},
			{"CreateSecret", "POST", "/secrets"},
			{"CORS", "OPTIONS", "/secrets"},
			{"CORS", "OPTIONS", "/secrets/{path}/value"},
			{"CORS", "OPTIONS", "/secrets/{path}"},
		},
		ListSecrets:    NewListSecretsHandler(e.ListSecrets, mux, decoder, encoder, errhandler, formatter),
		GetSecretValue: NewGetSecretValueHandler(e.GetSecretValue, mux, decoder, encoder, errhandler, formatter),
		GetSecret:      NewGetSecretHandler(e.GetSecret, mux, decoder, encoder, errhandler, formatter),
		CreateSecret:   NewCreateSecretHandler(e.CreateSecret, mux, decoder, encoder, errhandler, formatter),
		CORS:           NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "secrets" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListSecrets = m(s.ListSecrets)
	s.GetSecretValue = m(s.GetSecretValue)
	s.GetSecret = m(s.GetSecret)
	s.CreateSecret = m(s.CreateSecret)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return secrets.MethodNames[:] }

// Mount configures the mux to serve the secrets endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListSecretsHandler(mux, h.ListSecrets)
	MountGetSecretValueHandler(mux, h.GetSecretValue)
	MountGetSecretHandler(mux, h.GetSecret)
	MountCreateSecretHandler(mux, h.CreateSecret)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the secrets endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListSecretsHandler configures the mux to serve the "secrets" service
// "list secrets" endpoint.
func MountListSecretsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSecretsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/secrets", f)
}

// NewListSecretsHandler creates a HTTP handler which loads the HTTP request
// and calls the "secrets" service "list secrets" endpoint.
func NewListSecretsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListSecretsResponse(encoder)
		encodeError    = EncodeListSecretsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list secrets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "secrets")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSecretValueHandler configures the mux to serve the "secrets" service
// "get secret value" endpoint.
func MountGetSecretValueHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSecretsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/secrets/{path}/value", f)
}

// NewGetSecretValueHandler creates a HTTP handler which loads the HTTP request
// and calls the "secrets" service "get secret value" endpoint.
func NewGetSecretValueHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSecretValueRequest(mux, decoder)
		encodeResponse = EncodeGetSecretValueResponse(encoder)
		encodeError    = EncodeGetSecretValueError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get secret value")
		ctx = context.WithValue(ctx, goa.ServiceKey, "secrets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSecretHandler configures the mux to serve the "secrets" service "get
// secret" endpoint.
func MountGetSecretHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSecretsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/secrets/{path}", f)
}

// NewGetSecretHandler creates a HTTP handler which loads the HTTP request and
// calls the "secrets" service "get secret" endpoint.
func NewGetSecretHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSecretRequest(mux, decoder)
		encodeResponse = EncodeGetSecretResponse(encoder)
		encodeError    = EncodeGetSecretError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get secret")
		ctx = context.WithValue(ctx, goa.ServiceKey, "secrets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateSecretHandler configures the mux to serve the "secrets" service
// "create secret" endpoint.
func MountCreateSecretHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSecretsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/secrets", f)
}

// NewCreateSecretHandler creates a HTTP handler which loads the HTTP request
// and calls the "secrets" service "create secret" endpoint.
func NewCreateSecretHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateSecretRequest(mux, decoder)
		encodeResponse = EncodeCreateSecretResponse(encoder)
		encodeError    = EncodeCreateSecretError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create secret")
		ctx = context.WithValue(ctx, goa.ServiceKey, "secrets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service secrets.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleSecretsOrigin(h)
	mux.Handle("OPTIONS", "/secrets", h.ServeHTTP)
	mux.Handle("OPTIONS", "/secrets/{path}/value", h.ServeHTTP)
	mux.Handle("OPTIONS", "/secrets/{path}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleSecretsOrigin applies the CORS response headers corresponding to the
// origin for the service secrets.
func HandleSecretsOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "http://localhost:3000") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "3600")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
