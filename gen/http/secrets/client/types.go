// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets HTTP client types
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goa "goa.design/goa/v3/pkg"
)

// GetSecretValueRequestBody is the type of the "secrets" service "get secret
// value" endpoint HTTP request body.
type GetSecretValueRequestBody struct {
	// Base64 encoded secret's path
	Path string `form:"path" json:"path" xml:"path"`
}

// GetSecretRequestBody is the type of the "secrets" service "get secret"
// endpoint HTTP request body.
type GetSecretRequestBody struct {
	// Base64 encoded secret's path
	Path string `form:"path" json:"path" xml:"path"`
}

// GetSecretValueResponseBody is the type of the "secrets" service "get secret
// value" endpoint HTTP response body.
type GetSecretValueResponseBody struct {
	// The secret value
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// The original path of the secret
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// GetSecretResponseBody is the type of the "secrets" service "get secret"
// endpoint HTTP response body.
type GetSecretResponseBody struct {
	// The original path of the secret
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
	// The owner of the secret
	Owner *UserResponseBody `form:"owner,omitempty" json:"owner,omitempty" xml:"owner,omitempty"`
	// Members authorized to access the secret
	AuthorizedMembers []*UserResponseBody `form:"authorized_members,omitempty" json:"authorized_members,omitempty" xml:"authorized_members,omitempty"`
	// Roles authorized to access the secret
	AuthorizedRoles []*RoleTypeResponseBody `form:"authorized_roles,omitempty" json:"authorized_roles,omitempty" xml:"authorized_roles,omitempty"`
	// Creation timestamp of the secret
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp of the secret
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetSecretValueSecretNotFoundResponseBody is the type of the "secrets"
// service "get secret value" endpoint HTTP response body for the
// "secret_not_found" error.
type GetSecretValueSecretNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSecretValueInvalidParametersResponseBody is the type of the "secrets"
// service "get secret value" endpoint HTTP response body for the
// "invalid_parameters" error.
type GetSecretValueInvalidParametersResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSecretValueUnauthorizedResponseBody is the type of the "secrets" service
// "get secret value" endpoint HTTP response body for the "unauthorized" error.
type GetSecretValueUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSecretSecretNotFoundResponseBody is the type of the "secrets" service
// "get secret" endpoint HTTP response body for the "secret_not_found" error.
type GetSecretSecretNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSecretInvalidParametersResponseBody is the type of the "secrets" service
// "get secret" endpoint HTTP response body for the "invalid_parameters" error.
type GetSecretInvalidParametersResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSecretUnauthorizedResponseBody is the type of the "secrets" service "get
// secret" endpoint HTTP response body for the "unauthorized" error.
type GetSecretUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// The username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// User creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// User last update timestamp
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// RoleTypeResponseBody is used to define fields on response body types.
type RoleTypeResponseBody struct {
	// Unique identifier for the role
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the role
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewGetSecretValueRequestBody builds the HTTP request body from the payload
// of the "get secret value" endpoint of the "secrets" service.
func NewGetSecretValueRequestBody(p *secrets.GetSecretValuePayload) *GetSecretValueRequestBody {
	body := &GetSecretValueRequestBody{
		Path: p.Path,
	}
	return body
}

// NewGetSecretRequestBody builds the HTTP request body from the payload of the
// "get secret" endpoint of the "secrets" service.
func NewGetSecretRequestBody(p *secrets.GetSecretPayload) *GetSecretRequestBody {
	body := &GetSecretRequestBody{
		Path: p.Path,
	}
	return body
}

// NewGetSecretValueResultOK builds a "secrets" service "get secret value"
// endpoint result from a HTTP "OK" response.
func NewGetSecretValueResultOK(body *GetSecretValueResponseBody) *secrets.GetSecretValueResult {
	v := &secrets.GetSecretValueResult{
		Value: body.Value,
		Path:  body.Path,
	}

	return v
}

// NewGetSecretValueSecretNotFound builds a secrets service get secret value
// endpoint secret_not_found error.
func NewGetSecretValueSecretNotFound(body *GetSecretValueSecretNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSecretValueInvalidParameters builds a secrets service get secret value
// endpoint invalid_parameters error.
func NewGetSecretValueInvalidParameters(body *GetSecretValueInvalidParametersResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSecretValueUnauthorized builds a secrets service get secret value
// endpoint unauthorized error.
func NewGetSecretValueUnauthorized(body *GetSecretValueUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSecretValueInternalError builds a secrets service get secret value
// endpoint internal_error error.
func NewGetSecretValueInternalError(body string) secrets.InternalError {
	v := secrets.InternalError(body)

	return v
}

// NewGetSecretSecretInfoOK builds a "secrets" service "get secret" endpoint
// result from a HTTP "OK" response.
func NewGetSecretSecretInfoOK(body *GetSecretResponseBody) *secrets.SecretInfo {
	v := &secrets.SecretInfo{
		Path:      body.Path,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}
	if body.Owner != nil {
		v.Owner = unmarshalUserResponseBodyToSecretsUser(body.Owner)
	}
	if body.AuthorizedMembers != nil {
		v.AuthorizedMembers = make([]*secrets.User, len(body.AuthorizedMembers))
		for i, val := range body.AuthorizedMembers {
			v.AuthorizedMembers[i] = unmarshalUserResponseBodyToSecretsUser(val)
		}
	}
	if body.AuthorizedRoles != nil {
		v.AuthorizedRoles = make([]*secrets.RoleType, len(body.AuthorizedRoles))
		for i, val := range body.AuthorizedRoles {
			v.AuthorizedRoles[i] = unmarshalRoleTypeResponseBodyToSecretsRoleType(val)
		}
	}

	return v
}

// NewGetSecretSecretNotFound builds a secrets service get secret endpoint
// secret_not_found error.
func NewGetSecretSecretNotFound(body *GetSecretSecretNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSecretInvalidParameters builds a secrets service get secret endpoint
// invalid_parameters error.
func NewGetSecretInvalidParameters(body *GetSecretInvalidParametersResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSecretUnauthorized builds a secrets service get secret endpoint
// unauthorized error.
func NewGetSecretUnauthorized(body *GetSecretUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSecretInternalError builds a secrets service get secret endpoint
// internal_error error.
func NewGetSecretInternalError(body string) secrets.InternalError {
	v := secrets.InternalError(body)

	return v
}

// ValidateGetSecretResponseBody runs the validations defined on Get
// SecretResponseBody
func ValidateGetSecretResponseBody(body *GetSecretResponseBody) (err error) {
	if body.Owner != nil {
		if err2 := ValidateUserResponseBody(body.Owner); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.AuthorizedMembers {
		if e != nil {
			if err2 := ValidateUserResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetSecretValueSecretNotFoundResponseBody runs the validations
// defined on get secret value_secret_not_found_response_body
func ValidateGetSecretValueSecretNotFoundResponseBody(body *GetSecretValueSecretNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSecretValueInvalidParametersResponseBody runs the validations
// defined on get secret value_invalid_parameters_response_body
func ValidateGetSecretValueInvalidParametersResponseBody(body *GetSecretValueInvalidParametersResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSecretValueUnauthorizedResponseBody runs the validations defined
// on get secret value_unauthorized_response_body
func ValidateGetSecretValueUnauthorizedResponseBody(body *GetSecretValueUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSecretSecretNotFoundResponseBody runs the validations defined on
// get secret_secret_not_found_response_body
func ValidateGetSecretSecretNotFoundResponseBody(body *GetSecretSecretNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSecretInvalidParametersResponseBody runs the validations defined
// on get secret_invalid_parameters_response_body
func ValidateGetSecretInvalidParametersResponseBody(body *GetSecretInvalidParametersResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSecretUnauthorizedResponseBody runs the validations defined on
// get secret_unauthorized_response_body
func ValidateGetSecretUnauthorizedResponseBody(body *GetSecretUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}
