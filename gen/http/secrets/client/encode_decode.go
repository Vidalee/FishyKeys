// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetSecretValueRequest instantiates a HTTP request object with method
// and path set to call the "secrets" service "get secret value" endpoint
func (c *Client) BuildGetSecretValueRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSecretValueSecretsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("secrets", "get secret value", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSecretValueRequest returns an encoder for requests sent to the
// secrets get secret value server.
func EncodeGetSecretValueRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*secrets.GetSecretValuePayload)
		if !ok {
			return goahttp.ErrInvalidType("secrets", "get secret value", "*secrets.GetSecretValuePayload", v)
		}
		body := NewGetSecretValueRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("secrets", "get secret value", err)
		}
		return nil
	}
}

// DecodeGetSecretValueResponse returns a decoder for responses returned by the
// secrets get secret value endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetSecretValueResponse may return the following errors:
//   - "secret_not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetSecretValueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSecretValueResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret value", err)
			}
			res := NewGetSecretValueResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetSecretValueSecretNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret value", err)
			}
			err = ValidateGetSecretValueSecretNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret value", err)
			}
			return nil, NewGetSecretValueSecretNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetSecretValueInvalidParametersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret value", err)
			}
			err = ValidateGetSecretValueInvalidParametersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret value", err)
			}
			return nil, NewGetSecretValueInvalidParameters(&body)
		case http.StatusUnauthorized:
			var (
				body GetSecretValueUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret value", err)
			}
			err = ValidateGetSecretValueUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret value", err)
			}
			return nil, NewGetSecretValueUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GetSecretValueInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret value", err)
			}
			err = ValidateGetSecretValueInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret value", err)
			}
			return nil, NewGetSecretValueInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("secrets", "get secret value", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSecretRequest instantiates a HTTP request object with method and
// path set to call the "secrets" service "get secret" endpoint
func (c *Client) BuildGetSecretRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSecretSecretsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("secrets", "get secret", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSecretRequest returns an encoder for requests sent to the secrets
// get secret server.
func EncodeGetSecretRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*secrets.GetSecretPayload)
		if !ok {
			return goahttp.ErrInvalidType("secrets", "get secret", "*secrets.GetSecretPayload", v)
		}
		body := NewGetSecretRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("secrets", "get secret", err)
		}
		return nil
	}
}

// DecodeGetSecretResponse returns a decoder for responses returned by the
// secrets get secret endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetSecretResponse may return the following errors:
//   - "secret_not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "invalid_parameters" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetSecretResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSecretResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret", err)
			}
			err = ValidateGetSecretResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret", err)
			}
			res := NewGetSecretSecretInfoOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetSecretSecretNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret", err)
			}
			err = ValidateGetSecretSecretNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret", err)
			}
			return nil, NewGetSecretSecretNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetSecretInvalidParametersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret", err)
			}
			err = ValidateGetSecretInvalidParametersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret", err)
			}
			return nil, NewGetSecretInvalidParameters(&body)
		case http.StatusUnauthorized:
			var (
				body GetSecretUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret", err)
			}
			err = ValidateGetSecretUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret", err)
			}
			return nil, NewGetSecretUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GetSecretInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("secrets", "get secret", err)
			}
			err = ValidateGetSecretInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("secrets", "get secret", err)
			}
			return nil, NewGetSecretInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("secrets", "get secret", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseBodyToSecretsUser builds a value of type *secrets.User
// from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToSecretsUser(v *UserResponseBody) *secrets.User {
	if v == nil {
		return nil
	}
	res := &secrets.User{
		Username:  *v.Username,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// unmarshalRoleTypeResponseBodyToSecretsRoleType builds a value of type
// *secrets.RoleType from a value of type *RoleTypeResponseBody.
func unmarshalRoleTypeResponseBodyToSecretsRoleType(v *RoleTypeResponseBody) *secrets.RoleType {
	if v == nil {
		return nil
	}
	res := &secrets.RoleType{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}
