// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetSecretValuePayload builds the payload for the secrets get secret
// value endpoint from CLI flags.
func BuildGetSecretValuePayload(secretsGetSecretValueBody string) (*secrets.GetSecretValuePayload, error) {
	var err error
	var body GetSecretValueRequestBody
	{
		err = json.Unmarshal([]byte(secretsGetSecretValueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"path\": \"L2N1c3RvbWVycy9nb29nbGUvYXBpX2tleQ==\"\n   }'")
		}
		if utf8.RuneCountInString(body.Path) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.path", body.Path, utf8.RuneCountInString(body.Path), 2, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &secrets.GetSecretValuePayload{
		Path: body.Path,
	}

	return v, nil
}

// BuildGetSecretPayload builds the payload for the secrets get secret endpoint
// from CLI flags.
func BuildGetSecretPayload(secretsGetSecretBody string) (*secrets.GetSecretPayload, error) {
	var err error
	var body GetSecretRequestBody
	{
		err = json.Unmarshal([]byte(secretsGetSecretBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"path\": \"L2N1c3RvbWVycy9nb29nbGUvYXBpX2tleQ==\"\n   }'")
		}
		if utf8.RuneCountInString(body.Path) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.path", body.Path, utf8.RuneCountInString(body.Path), 2, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &secrets.GetSecretPayload{
		Path: body.Path,
	}

	return v, nil
}
