// Code generated by goa v3.21.1, DO NOT EDIT.
//
// secrets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/Vidalee/FishyKeys/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	secrets "github.com/Vidalee/FishyKeys/gen/secrets"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetSecretValuePayload builds the payload for the secrets get secret
// value endpoint from CLI flags.
func BuildGetSecretValuePayload(secretsGetSecretValuePath string) (*secrets.GetSecretValuePayload, error) {
	var err error
	var path string
	{
		path = secretsGetSecretValuePath
		if utf8.RuneCountInString(path) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("path", path, utf8.RuneCountInString(path), 2, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &secrets.GetSecretValuePayload{}
	v.Path = path

	return v, nil
}

// BuildGetSecretPayload builds the payload for the secrets get secret endpoint
// from CLI flags.
func BuildGetSecretPayload(secretsGetSecretPath string) (*secrets.GetSecretPayload, error) {
	var err error
	var path string
	{
		path = secretsGetSecretPath
		if utf8.RuneCountInString(path) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("path", path, utf8.RuneCountInString(path), 2, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &secrets.GetSecretPayload{}
	v.Path = path

	return v, nil
}

// BuildCreateSecretPayload builds the payload for the secrets create secret
// endpoint from CLI flags.
func BuildCreateSecretPayload(secretsCreateSecretBody string) (*secrets.CreateSecretPayload, error) {
	var err error
	var body CreateSecretRequestBody
	{
		err = json.Unmarshal([]byte(secretsCreateSecretBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"authorized_members\": [\n         1,\n         2,\n         3\n      ],\n      \"authorized_roles\": [\n         1,\n         2\n      ],\n      \"path\": \"L2N1c3RvbWVycy9nb29nbGUvYXBpX2tleQ==\",\n      \"value\": \"SECRET_API_KEY123\"\n   }'")
		}
		if body.AuthorizedMembers == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorized_members", "body"))
		}
		if body.AuthorizedRoles == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorized_roles", "body"))
		}
		if utf8.RuneCountInString(body.Path) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.path", body.Path, utf8.RuneCountInString(body.Path), 2, true))
		}
		if utf8.RuneCountInString(body.Value) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.value", body.Value, utf8.RuneCountInString(body.Value), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &secrets.CreateSecretPayload{
		Path:  body.Path,
		Value: body.Value,
	}
	if body.AuthorizedMembers != nil {
		v.AuthorizedMembers = make([]int, len(body.AuthorizedMembers))
		for i, val := range body.AuthorizedMembers {
			v.AuthorizedMembers[i] = val
		}
	} else {
		v.AuthorizedMembers = []int{}
	}
	if body.AuthorizedRoles != nil {
		v.AuthorizedRoles = make([]int, len(body.AuthorizedRoles))
		for i, val := range body.AuthorizedRoles {
			v.AuthorizedRoles[i] = val
		}
	} else {
		v.AuthorizedRoles = []int{}
	}

	return v, nil
}
